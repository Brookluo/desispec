from astropy.io import fits

import numpy as np
import specex as spx
import specter.psf

def write_psf(pyps,opts):
    
    dotest = False
    if not dotest:
        
        specter_psf = specter.psf.GaussHermitePSF(opts.output_fits_filename)
        
        xtrace=spx.get_trace(pyps,'x')
        ytrace=spx.get_trace(pyps,'y')
    
        fiberkeys = spx.VectorInt()
        wavekeys  = spx.VectorDouble()
        spx.get_tracekeys(pyps,fiberkeys,wavekeys)

        print(fiberkeys,wavekeys)
        print(np.shape(xtrace))
        xtrace = np.reshape(xtrace,(500,7))
        ytrace = np.reshape(ytrace,(500,7))
        
    else:

        spxpsf='/project/projectdirs/desi/users/malvarez/desi/psf-dev/fit-psf-r0-00055705_00.fits'
        specter_psf = specter.psf.GaussHermitePSF(spxpsf)
        
        #x1 = np.linspace(0,1.,7)
        #x2 = np.linspace(0,1.,500)
        #xtrace, ytrace = np.meshgrid(x1,x2)
        
        fiberkeys = np.asarray([0,499])
        wavekeys  = np.asarray([5543.,7826.])
    
        hdul = fits.open(spxpsf)
        xtrace = hdul[0].data
        ytrace = hdul[1].data
        print(np.shape(xtrace),np.shape(ytrace))
        
    print('first x entry',xtrace[0][0])
    print('first y entry',ytrace[0][0])

    fitsfile='foo.fits'

    # XTRACE AND HEADER

    hdu_xtrace = fits.PrimaryHDU(xtrace)
    hdr_xtrace = hdu_xtrace.header
        
    hdr_xtrace['EXTNAME'] = 'XTRACE'
    hdr_xtrace['FIBERMIN'] = fiberkeys[0]
    hdr_xtrace['FIBERMAX'] = fiberkeys[1]
    hdr_xtrace['WAVEMIN'] = wavekeys[0]
    hdr_xtrace['WAVEMAX'] = wavekeys[1]

    hdr_xtrace.comments['EXTEND'] = 'FITS dataset may contain extensions'
    hdr_xtrace.comments['SIMPLE'] = 'file does conform to FITS standard'
    hdr_xtrace.comments['BITPIX'] = 'number of bits per data pixel'
    hdr_xtrace.comments['NAXIS']  = 'number of data axes'
    hdr_xtrace.comments['NAXIS1'] = 'length of data axis 1'
    hdr_xtrace.comments['NAXIS2'] = 'length of data axis 2'
    
    hdr_xtrace.insert(6,('COMMENT', '  FITS (Flexible Image Transport System) format is defined in \'Astronomy  and Astrophysics\', volume 376, page 359; bibcode: 2001A&A...376..359H'))

    hdr_xtrace['PSFTYPE'] = 'GAUSS-HERMITE'
    hdr_xtrace['PSFVER']  = 3

    hdr_xtrace.insert(16,('COMMENT', 'PSF generated by specex, https://github.com/desihub/specex'))
    # YTRACE AND HEADER

    hdu_ytrace = fits.ImageHDU(ytrace)
    hdr_ytrace = hdu_ytrace.header
    
    hdr_ytrace['PCOUNT'] = 0
    hdr_ytrace['GCOUNT'] = 1
    hdr_ytrace['EXTNAME'] = 'YTRACE'
    hdr_ytrace['FIBERMIN'] = fiberkeys[0]
    hdr_ytrace['FIBERMAX'] = fiberkeys[1]
    hdr_ytrace['WAVEMIN'] = wavekeys[0]
    hdr_ytrace['WAVEMAX'] = wavekeys[1]

    hdr_ytrace.comments['XTENSION'] = 'IMAGE extension'
    hdr_ytrace.comments['PCOUNT']   = 'required keyword; must = 0'
    hdr_ytrace.comments['GCOUNT']   = 'required keyword; must = 1'
    hdr_ytrace.comments['BITPIX']   = 'number of bits per data pixel'
    hdr_ytrace.comments['NAXIS']    = 'number of data axes'
    hdr_ytrace.comments['NAXIS1']   = 'length of data axis 1'
    hdr_ytrace.comments['NAXIS2']   = 'length of data axis 2'
    
    # WRITE HDUS
    hdul = fits.HDUList([hdu_xtrace, hdu_ytrace])
    hdul.writeto(fitsfile,overwrite=True)
    
    return

