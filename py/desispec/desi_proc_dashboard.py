import argparse
import os,glob
import re
from astropy.io import fits
import time,datetime
import numpy as np
import psutil
from os import listdir

#HEX #005AB5 R 0  G 90  B 181
#HEX #DC3220 R 220  G 50  B

#import desispec.io as desi_io
########################
### Helper Functions ###
########################
def what_night_is_it():
    """
    Return the current night
    """
    d = datetime.datetime.utcnow() - datetime.timedelta(7 / 24 + 0.5)
    tonight = int(d.strftime('%Y%m%d'))
    return tonight


def find_newexp(night, fileglob, known_exposures):
    """
    Check the path given for new exposures
    """
    datafiles = sorted(glob.glob(fileglob))
    newexp = list()
    for filepath in datafiles:
        expid = int(os.path.basename(os.path.dirname(filepath)))
        if (night, expid) not in known_exposures:
            newexp.append((night, expid))

    return set(newexp)


def get_catchup_nights(catchup_filename, docatchup=True):
    if docatchup and catchup_filename is not None and os.path.exists(catchup_filename):
        catchup = np.atleast_1d(np.loadtxt(catchup_filename, dtype=int)).tolist()
    else:
        catchup = []

    return catchup

def check_running(proc_name= 'desi_dailyproc'):
    """
    Check if the desi_dailyproc process is running
    """
    running = False
    mypid = os.getpid()
    for p in psutil.process_iter():
        if p.pid != mypid and proc_name in ' '.join(p.cmdline()):
            print('ERROR: {}} already running as PID {}:'.format(proc_name,p.pid))
            print('  ' + ' '.join(p.cmdline()))
            running = True
            break
    return running



######################
### Main Functions ###
######################
class DESI_PROC_DASHBOARD(object):
    """ Code to generate a webpage for monitoring of desi_dailyproc production status   
    Usage:
    -n can be 'all' or series of nights separated by comma or blank like 20200101,20200102 or 20200101 20200102
    Normal Mode:
    desi_proc_dashboard -n all --n_nights 3  --output_dir /global/cfs/cdirs/desi/www/users/zhangkai/desi_proc_dashboard/
    desi_proc_dashboard -n 20200101,20200102 --n_nights 3  --output_dir /global/cfs/cdirs/desi/www/users/zhangkai/desi_proc_dashboard/
    desi_proc_dashboard -n 20200101 20200102 --n_nights 3  --output_dir /global/cfs/cdirs/desi/www/users/zhangkai/desi_proc_dashboard/
    Cron job script:
        */30 * * * * /global/common/software/desi/cori/desiconda/20190804-1.3.0-spec/conda/bin/python3 \
            /global/cfs/cdirs/desi/users/zhangkai/desi/code/desispec/py/desispec/desi_proc_dashboard.py -n all \
            --n_nights 30 --output_dir /global/cfs/cdirs/desi/www/users/zhangkai/desi_proc_dashboard/ \
            >/global/cfs/cdirs/desi/users/zhangkai/desi_proc_dashboard.log \
            2>/global/cfs/cdirs/desi/users/zhangkai/desi_proc_dashboard.err & \
            output_url https://portal.nersc.gov/project/desi/users/zhangkai/desi_proc_dashboard/
    """

    def __init__(self):
        if not os.getenv('DESI_SPECTRO_REDUX'): # these are not set by default in cronjob mode.
            os.environ['DESI_SPECTRO_REDUX']='/global/cfs/cdirs/desi/spectro/redux/'
            os.environ['DESI_SPECTRO_DATA']='/global/cfs/cdirs/desi/spectro/data/'
            os.environ['SPECPROD']='daily'
        ############
        ## Input ###
        ############
        parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        parser = self._init_parser(parser)
        args = parser.parse_args()
        self.prod_dir=args.prod_dir
        self.output_dir=args.output_dir # Portal directory for output html files

        if args.nights[0]=='all':
            nights = list()
            for n in listdir(os.getenv('DESI_SPECTRO_DATA')):
                #- nights are 20YYMMDD
                if re.match('^20\d{6}$', n):
                    nights.append(int(n))
        else:
            try:
                print(args.nights)
                if len(args.nights)==1: # list separted by , or a single night
                    nights=[int(night) for night in args.nights[0].split(',')]
                else:
                    nights=[int(night) for night in args.nights]
                print('Get nights',nights)
            except:
                nights=[]

        tonight=self.what_night_is_it()
        if not tonight in nights:
            nights.append(tonight)
        nights.sort(reverse=True)

        if int(args.n_nights)<=len(nights):
            nights=nights[0:int(args.n_nights)]

        print('Searching '+self.prod_dir+' for ',nights)

        ######################################################################
        ## sub directories. Should not change if generated by the same code ##
        ## that follows the same directory strucure ##
        ######################################################################

        strTable=self._initialize_page()

        for night in nights:
            #print(night)
            stat_night=self.calculate_one_night(night)
            ####################################
            #### Table for individual night ####
            ####################################
            strTable=strTable+self._add_html_table(stat_night,str(night))
            
        timestamp=time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
        running='No'
        if self.check_running(proc_name='desi_dailyproc'):
            running='Yes'
        strTable=strTable+"<div style='color:#00FF00'>{} {} running: {}</div>".format(timestamp,'desi_dailyproc',running)
        strTable=strTable+self._add_js_script1()
        strTable=strTable+"</html>"
        with open(os.path.join(self.output_dir,"desi_proc_dashboard.html"),'w') as hs:
            hs.write(strTable)

        ##########################
        #### Fix Permission ######
        ##########################
        cmd="chmod -R a+xr "+self.output_dir
        os.system(cmd)

    def _init_parser(self,parser):
        """
        Initialize the parser to read input 
        """
        parser.add_argument('-n','--nights', type=str, default = None, required = False, help="nights to monitor",nargs="*")
        parser.add_argument('--n_nights', type=str, default = None, required = False, help="all:all nights. ifdigit: the last n nights.")
        parser.add_argument('--prod_dir', type=str, default = os.path.join(os.environ['DESI_SPECTRO_REDUX'],os.environ['SPECPROD']),
                            required = False, help="Product directory, point to $DESI_SPECTRO_REDUX/$SPECPROD by default ")
        parser.add_argument('--output_dir', type=str, default = None, required = True, help="output portal directory for the html pages ")
        return parser

    def calculate_one_night(self,night):
        """
        For a given night, return the file counts and other other information for each exposure taken on that night
        input: night
        output: a dictionary containing the statistics with expid as key name
        FLAVOR: FLAVOR of this exposure
        OBSTYPE: OBSTYPE of this exposure
        EXPTIME: Exposure time
        SPECTROGRAPHS: a list of spectrographs used
        n_spectrographs: number of spectrographs
        n_psf: number of PSF files
        n_ff:  number of fiberflat files
        n_frame: number of frame files
        n_sframe: number of sframe files
        n_cframe: number of cframe files
        n_sky: number of sky files
        """
        rawdata_fileglob = '{}/{}/*/desi-*.fits.fz'.format(os.getenv('DESI_SPECTRO_DATA'), night)
        known_exposures = set()
        newexp = find_newexp(night, rawdata_fileglob, known_exposures)
        expids=[t[1] for t in newexp]
        expids.sort(reverse=True)
        output={}
        fileglob = os.path.join(os.getenv('DESI_SPECTRO_REDUX'),os.getenv('SPECPROD'), 'exposures', str(night), '{}', '{}')
        for expid in expids:
            zfild_expid = str(expid).zfill(8)
            # Check the redux folder for reduced files 
            filename=os.path.join(os.getenv('DESI_SPECTRO_DATA'), str(night), zfild_expid,'desi-'+str(expid).zfill(8)+'.fits.fz')
            h1=fits.getheader(filename,1)

            header_info = {keyword:'Unknown' for keyword in ['FLAVOR','SPCGRPHS','EXPTIME','OBSTYPE']}
            for keyword in header_info.keys():
                if keyword in h1.keys():
                    header_info[keyword] = h1[keyword].strip()

            file_psf=      glob.glob(fileglob.format(zfild_expid,'psf*.fits'))
            file_fit_psf=  glob.glob(fileglob.format(zfild_expid,'fit-psf*.fits'))
            file_fiberflat=glob.glob(fileglob.format(zfild_expid,'fiberflat*.fits'))
            file_frame=    glob.glob(fileglob.format(zfild_expid,'frame*.fits'))
            file_sframe=   glob.glob(fileglob.format(zfild_expid,'sframe*.fits'))
            file_cframe=   glob.glob(fileglob.format(zfild_expid,'cframe*.fits'))
            file_sky=      glob.glob(fileglob.format(zfild_expid,'sky*.fits'))

            output[str(expid)]={'FLAVOR':header_info['FLAVOR'],'OBSTYPE':header_info['OBSTYPE'],'EXPTIME':header_info['EXPTIME'],
                                'SPECTROGRAPHS':header_info['SPCGRPHS'],'n_spectrographs':len(header_info['SPCGRPHS'].split(',')),
                                'n_psf':len(file_psf)+len(file_fit_psf),'n_ff':len(file_fiberflat),'n_frame':len(file_frame),
                                'n_sframe':len(file_sframe),'n_cframe':len(file_cframe),'n_sky':len(file_sky)}
        return(output)

    def _initialize_page(self):
        """
        Initialize the html file for showing the statistics, giving all the headers and CSS setups. 
        """
        #strTable="<html><style> table {font-family: arial, sans-serif;border-collapse: collapse;width: 100%;}"
        #strTable=strTable+"td, th {border: 1px solid #dddddd;text-align: left;padding: 8px;}"
        #strTable=strTable+"tr:nth-child(even) {background-color: #dddddd;}</style>"
        strTable="""<html><style>
        h1 {font-family: 'sans-serif';font-size:50px;color:#4CAF50}
        #c {font-family: 'Trebuchet MS', Arial, Helvetica, sans-serif;border-collapse: collapse;width: 100%;}
        #c td, #c th {border: 1px solid #ddd;padding: 8px;}
        #c tr:nth-child(even){background-color: #f2f2f2;}
        #c tr:hover {background-color: #ddd;}
        #c th {padding-top: 12px;  padding-bottom: 12px;  text-align: left;  background-color: #4CAF50;  color: white;}
        .collapsible {background-color: #eee;color: #444;cursor: pointer;padding: 18px;width: 100%;border: none;text-align: left;outline: none;font-size: 25px;}
        .regular {background-color: #eee;color: #444;  cursor: pointer;  padding: 18px;  width: 25%;  border: 18px;  text-align: left;  outline: none;  font-size: 25px;}
        .active, .collapsible:hover {  background-color: #ccc;}
        .content {padding: 0 18px;display: table;overflow: hidden;background-color: #f1f1f1;maxHeight:0px;}
        /* The Modal (background) */
        .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 90%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        }
        

       /* The Close Button */
       .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        }
        .close:hover,
        .close:focus {
             color: #000;
             text-decoration: none;
             cursor: pointer;
         }
        </style>
        <h1>DESI PROC STATUS MONITOR</h1>"""

        return strTable

    def _add_html_table(self,table,night):
        """
        Add a collapsible and extendable table to the html file for one specific night
        Input
        table: the table generated by 'calculate_one_night'
        night: like 20200131
        output: The string to be added to the html file
        """
        heading="Night "+night
        strTable="<button class='collapsible'>"+heading+"</button><div class='content' style='display:inline-block;min-height:0%;'>"
        strTable = strTable+"<table id='c'><tr><th>Expid</th><th>FLAVOR</th><th>OBSTYPE</th><th>EXPTIME</th><th>SPECTROGRAGHS</th><th>PSF File</th><th>FFlat file</th><th>frame file</th><th>sframe file</th><th>sky file</th><th>cframe file</th></tr>"
        for i in range(len(table)):
            expid=list(table.keys())[i]
            n_expected=0
            if True:
                obstype=str(table[expid]['OBSTYPE']).upper().strip()
                n_spectrographs=int(table[expid]['n_spectrographs'])
                if obstype=='ZERO':
                    n_ref=[str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                elif obstype=='ARC':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                elif obstype=='FLAT':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                elif obstype=='SKY' or obstype=='SCIENCE' or obstype=='NONE':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*3),str(n_spectrographs*3)]
                elif obstype=='TWILIGHT':
                    n_ref=[str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*3),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]
                else:
                    n_ref=[str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0),str(n_spectrographs*0)]

                color="green"
                str_row="<tr><td>"+expid+"</td><td>"+str(table[expid]['FLAVOR'])+"</td><td>"+str(table[expid]['OBSTYPE'])+\
                        "</td><td>"+str(table[expid]['EXPTIME'])+"</td><td>"+table[expid]['SPECTROGRAPHS']+"</td><td>"+\
                        str(table[expid]['n_psf'])+'/'+n_ref[0]+"</td><td>"+str(table[expid]['n_ff'])+'/'+n_ref[1]+\
                        "</td><td>"+str(table[expid]['n_frame'])+'/'+n_ref[2]+"</td><td>"+str(table[expid]['n_sframe'])+\
                        '/'+n_ref[3]+"</td><td>"+str(table[expid]['n_sky'])+'/'+n_ref[4]+"</td><td>"+\
                        str(table[expid]['n_cframe'])+'/'+n_ref[5]+"</td></tr>"
                strTable=strTable+str_row
            else:
                pass
        strTable=strTable+"</table></div>"
        return strTable

    def _add_js_script1(self):
        """
        Return the javascript script to be added to the html file
        """
        s="""<script>
            var coll = document.getElementsByClassName('collapsible');
            var i;
            for (i = 0; i < coll.length; i++) {
                coll[i].nextElementSibling.style.maxHeight='0px';
                coll[i].addEventListener('click', function() {
                    this.classList.toggle('active');
                    var content = this.nextElementSibling;
                    if (content.style.maxHeight){
                       content.style.maxHeight = null;
                    } else {
                      content.style.maxHeight = '0px';
                            } 
                    });
             };
             var b1 = document.getElementById('b1');
             b1.addEventListener('click',function() {
                 for (i = 0; i < coll.length; i++) {
                     coll[i].nextElementSibling.style.maxHeight=null;
                                                   }});
             var b2 = document.getElementById('b2');
             b2.addEventListener('click',function() {
                 for (i = 0; i < coll.length; i++) {
                     coll[i].nextElementSibling.style.maxHeight='0px'
                             }});
            </script>"""
        return s





        
if __name__=="__main__":
    process=DESI_PROC_DASHBOARD()
