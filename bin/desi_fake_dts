#!/usr/bin/env python
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""Simulate DTS by copying data from a staging area.
"""

from __future__ import absolute_import, division, print_function

import sys
import os
import time
import shutil

from collections import OrderedDict

import argparse
import re
import warnings

import fitsio

import desispec.io as io

from desiutil.log import get_logger

import desispec.pipeline as pipe


def main(args):
    parser = argparse.ArgumentParser(description="Copy data from a staging "
        "area into DESI_SPECTRO_DATA")

    parser.add_argument("--staging", required=False, default=".",
        help="Staging directory containing night subdirs.")

    parser.add_argument("--exptime_arc", required=False, type=int, default=15,
        help="Minutes for arc exposures.")

    parser.add_argument("--exptime_flat", required=False, type=int, default=5,
        help="Minutes for flat exposures.")

    parser.add_argument("--exptime_science", required=False, type=int,
        default=15, help="Minutes for science exposures.")

    parser.add_argument("--night_break", required=False, default=0, type=int,
        help="Minutes to pause in between nights.")

    parser.add_argument("--copy", required=False, default=False,
        action="store_true", help="Copy data rather than symlink.")

    args = parser.parse_args()

    flavor_times = {
        "arc" : args.exptime_arc,
        "flat" : args.exptime_flat,
        "science" : args.exptime_science
    }

    log = get_logger()

    # data locations

    stagedir = os.path.abspath(args.staging)
    rawdir = os.path.abspath(io.rawdata_root())

    log.info("Starting fake DTS at {}".format(time.asctime()))
    log.info("  Will link data from staging location:")
    log.info("    {}".format(stagedir))
    log.info("  To DESI_SPECTRO_DATA at:")
    log.info("    {}".format(rawdir))
    sys.stdout.flush()

    nights = io.get_nights(strip_path=True)

    for nt in nights:
        # exposures for this night
        expids = io.get_exposures(night, raw=True, rawdata_dir=stagedir)

        # Look up flavors of each exposure
        lastarc = None
        lastflat = None
        ntexp = OrderedDict()
        for ex in expids:
            fibermap = io.get_raw_files("fibermap", nt, ex,
                                        rawdata_dir=stagedir)
            fmdata, header = fitsio.read(fibermap, header=True)
            flavor = header["FLAVOR"].strip().lower()
            if flavor not in ["arc", "flat", "science"] :
                log.error("Unknown flavor '{}' for file '{}'".format(flavor, fibermap))
            else:
                ntexp[ex] = flavor
                if flavor == "arc":
                    lastarc = ex
                if flavor == "flat":
                    lastflat = ex

        # Go through exposures in order
        for ex, flavor in ntexp.items():
            exptime = flavor_times[flavor]
            expsec = 60 * exptime
            log.info("Acquiring exposure {} on night {} for {} minutes...".format(ex, nt, exptime))
            sys.stdout.flush()
            time.sleep(expsec)
            fmsrc = io.get_raw_files("fibermap", nt, ex, rawdata_dir=stagedir)
            fmtarg = io.get_raw_files("fibermap", nt, ex)
            rawsrc = io.get_raw_files("raw", nt, ex, rawdata_dir=stagedir)
            rawtarg = io.get_raw_files("raw", nt, ex)
            targetdir = os.path.dirname(fmtarg)
            if not os.path.isdir(targetdir):
                os.makedirs(targetdir)
            if os.path.exists(fmtarg):
                os.remove(fmtarg)
            if os.path.exists(rawtarg):
                os.remove(rawtarg)
            if args.copy:
                shutil.copy2(fmsrc, fmtarg)
                shutil.copy2(rawsrc, rawtarg)
            else:
                # just symlink
                os.symlink(fmsrc, fmtarg)
                os.symlink(rawsrc, rawtarg)
            log.info("  Finished exposure {} on night {}".format(ex, nt))
            sys.stdout.flush()

            # Trigger nightly processing
            com = "desi_night update --night {} --expid {}".format(nt, ex)
            log.info("  Running {}".format(com))
            sp.check_call(com, shell=True, universal_newlines=True)

            # If we are at the last arc or flat, trigger nightly products.
            if ex == lastarc:
                com = "desi_night arcs --night {}".format(nt)
                log.info("  Running {}".format(com))
                sp.check_call(com, shell=True, universal_newlines=True)

            if ex == lastflat:
                com = "desi_night flats --night {}".format(nt)
                log.info("  Running {}".format(com))
                sp.check_call(com, shell=True, universal_newlines=True)

        # Trigger redshifts at the end of the night (for now)
        com = "desi_night redshifts --night {}".format(nt)
        log.info("  Running {}".format(com))
        sp.check_call(com, shell=True, universal_newlines=True)

if __name__ == '__main__':
    main()
