#!/usr/bin/env python
"""
Run DESI quickproc on a given exposure
"""


import argparse
import sys,os
import time
import numpy as np
import astropy.io.fits as fits
from desiutil.log import get_logger
from desispec.io import read_raw,read_image,read_fibermap
from desispec.io.xytraceset import read_xytraceset
from desispec.preproc import read_ccd_calibration
from desispec.quickproc.io import read_qframe,write_qframe
from desispec.quickproc.qextract import boxcar_extraction
from desispec.quickproc.qfiberflat import quick_apply_fiberflat,quick_compute_fiberflat
from desispec.quickproc.qsky import quick_sky_subtraction
from desispec.quickproc.util import parse_fibers

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-p','--psf', type = str, default = None, required = False,
                    help = 'path to psf fits file to get the trace coordinates (default is psf in $DESI_CCD_CALIBRATION_DATA)')
parser.add_argument('-i','--image', type = str, default = None, required = True,
                    help = 'path to image fits file (either preprocessed or raw image)')
parser.add_argument('-c','--camera', type = str, default = None, required = False,
                    help = 'has to specify camera if input image is raw data')
parser.add_argument('-o','--outframe', type = str, default = None, required = False,
                    help = 'path to output qframe file')
parser.add_argument('--fibers', type=str, default = None, required = False,
                    help = 'defines from_to which fiber to work on. (ex: --fibers=50:60,4 means that only fibers 4, and fibers from 50 to 60 (excluded) will be extracted)')
parser.add_argument('--width', type=int, default=7, required=False,
                    help = 'extraction line width')
parser.add_argument('--plot', action='store_true',
                    help = 'plot result')
parser.add_argument('--compute-fiberflat', type = str, default = None, required = False,
                    help = 'compute flat and save it to this file')
parser.add_argument('--fiberflat', type = str, default = None, required = False,
                    help = 'use this fiberflat file')
parser.add_argument('--skysub', action='store_true',
                    help = 'perform as simple sky subtraction')
parser.add_argument('-f','--fibermap', type = str, default = None, required = False,
                    help = 'path to fibermap file')

t0   = time.time()
log  = get_logger()
args = parser.parse_args()



# guess if it is a preprocessed or a raw image
hdulist   = fits.open(args.image)
is_preprocessed = ("IMAGE" in hdulist)&("IVAR" in hdulist)
primary_header  = hdulist[0].header
hdulist.close()

if is_preprocessed :
    image   = read_image(args.image)
else :
    if args.camera is None :
        print("need to specify camera to open a raw fits image (with all cameras in different fits HDUs)")
        print("try adding the option '--camera xx', with xx in {brz}{0-9}, like r7,  or type 'desi_quickproc --help' for more options")
        sys.exit(12)
    image = read_raw(args.image, args.camera)


if args.psf is None :
    if "DESI_CCD_CALIBRATION_DATA" not in os.environ :
        log.error("either specify the path to a psf with the '--psf' option or set the DESI_CCD_CALIBRATION_DATA environment variable")
        sys.exit(12)
    log.info("Choosing PSF using $DESI_CCD_CALIBRATION_DATA/ccd_calibration.yaml and the image header")
    calibration_data = read_ccd_calibration(image.meta,primary_header)
    args.psf = os.path.join(os.environ["DESI_CCD_CALIBRATION_DATA"],calibration_data["PSF"])
    log.info(" Using PSF {}".format(args.psf))

tset    = read_xytraceset(args.psf)


fibers  = parse_fibers(args.fibers)

# add fibermap
if args.fibermap :
    fibermap = read_fibermap(args.fibermap)
else :
    fibermap = None

qframe  = boxcar_extraction(tset,image,fibers=fibers,width=args.width, fibermap=fibermap)

if fibers is None : 
    fibers = qframe.flux.shape[0]

if args.compute_fiberflat is not None :
    qflat = quick_compute_fiberflat(qframe)
    write_qframe(args.compute_fiberflat,qflat)
    log.info("wrote {}".format(args.compute_fiberflat))
    
if args.fiberflat :
    log.info("applying fiber flat {}".format(args.fiberflat))
    flat = read_qframe(args.fiberflat)
    quick_apply_fiberflat(qframe,flat)

if args.skysub :
    log.info("sky subtraction")
    quick_sky_subtraction(qframe)
    
if args.outframe is not None :
    write_qframe(args.outframe,qframe)
    log.info("wrote {}".format(args.outframe))

t1 = time.time()
log.info("all done in {:3.1f} sec".format(t1-t0))

if args.plot :
    log.info("plotting {} spectra".format(qframe.wave.shape[0]))
    
    import matplotlib.pyplot as plt
    fig = plt.figure()
    for i in range(qframe.wave.shape[0]) :
        plt.plot(qframe.wave[i],qframe.flux[i])
    plt.grid()
    plt.xlabel("wavelength")
    plt.ylabel("flux")
    plt.show()
