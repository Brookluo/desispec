#!/usr/bin/env python
'''
Calculate stand alone tsnr tables for a given desispec prod.
'''

import os,sys
import glob
import itertools
import argparse
import astropy.io.fits as fits
import fitsio
import numpy as np
import multiprocessing
from astropy.table import Table,vstack

import yaml
from   pkg_resources import resource_filename

from   desispec.io import read_sky
from   desispec.io import read_fiberflat
from   pathlib import Path
from   desispec.io.meta import findfile, specprod_root
from   desispec.calibfinder import CalibFinder
from   desispec.io import read_frame
from   desispec.io import read_fibermap
from   desispec.io.fluxcalibration import read_flux_calibration
from   desiutil.log import get_logger
from   desispec.tsnr import calc_tsnr2,tsnr2_to_efftime
from   astropy.table import Table, vstack
from   desiutil.depend import getdep
from   desispec.tilecompleteness import compute_tile_completeness_table,merge_tile_completeness_table
from   desispec.skymag import compute_skymag

def parse(options=None):
    parser = argparse.ArgumentParser(
                description="Calculate template S/N ratio for exposures")
    parser.add_argument('-o','--outfile', type=str, default=None, required=False,
                        help = 'Output summary file')
    parser.add_argument('--update', action = 'store_true',
                        help = 'Update pre-existing output summary file (replace or append)')
    parser.add_argument('--details-dir', type=str, default = None, required=False,
                        help = 'Dir. to write per-exposure per-camera files with per-fiber tSNR details')
    parser.add_argument('--prod', type = str, default = "daily", required=False,
                        help = 'Path to input reduction, e.g. /global/cfs/cdirs/desi/spectro/redux/blanc/,  or simply prod version, like blanc, but requires env. variable DESI_SPECTRO_REDUX. Default is $DESI_SPECTRO_REDUX/$SPECPROD.')
    parser.add_argument('--cameras', type = str, default = None, required=False,
                        help = 'Cameras to reduce (comma separated)')
    parser.add_argument('--expids', type = str, default = None, required=False,
                        help = 'Comma separated list of exp ids to process')
    parser.add_argument('--nights', type = str, default = None, required=False,
                        help = 'Comma separated list of nights to process')
    parser.add_argument('--recompute', action='store_true',
                        help = 'Recompute TSNR values')
    parser.add_argument('--alpha_only', action='store_true',
                        help = 'Only compute the alpha for tsnr.')
    parser.add_argument('--nproc', type = int, default = 1,
                        help = 'Multiprocessing.')
    parser.add_argument('--efftime-config', type = str, default = None, required=False,
                        help = 'Use this config file instead of default data/tsnr/tsnr-efftime.yaml')
    parser.add_argument('--tile-completeness', type = str, default = None, required=False,
                        help = 'Ouput tile completeness table')
    parser.add_argument('--aux', type = str, default = None, required=False, nargs="*",
                    help = 'Path to auxiliary ttiles ables, like /global/cfs/cdirs/desi/survey/observations/SV1/sv1-tiles.fits')
    parser.add_argument('--gfa-proc-dir', type = str, default = None, required=False,
                        help = 'Directory where the GFA processing from Aaron can be found, like /global/cfs/cdirs/desi/GFA/offline_matched_coadd_ccds_SV')
    parser.add_argument('--skymags', type = str, default = None, required=False,
                        help = 'path to table with sky magnitudes. Expected keys=NIGHT,EXPID,SKY_MAG_G,SKY_MAG_R,SKY_MAG_Z')
    parser.add_argument('--compute-skymags', action='store_true',
                        help = 'recompute sky mags')

    args = None
    if options is None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(options)
    return args



def read_gfa_data(gfa_proc_dir) :
    tables=[]
    for survey in ["SV1","SV2"] :
        filename=sorted(glob.glob("{}/offline_matched_coadd_ccds_{}-thru_????????.fits".format(gfa_proc_dir,survey)))[-1]
        print(filename)
        table=Table.read(filename)
        tables.append(table)
    table=vstack(tables)
    print(table)
    return table



# AR https://desi.lbl.gov/trac/wiki/SurveyOps/SurveySpeed
# AR 2021-03-05: GFA values are now computed for a fiber diameter of 1.52"
def compute_efftime(table,
                    ffrac_psf_nom=0.58176816, # FRACFLUX_NOMINAL_POINTSOURCE in Aaron's table
                    ffrac_elg_nom=0.42423388, # FRACFLUX_NOMINAL_ELG
                    ffrac_bgs_nom=0.19544029, # FRACFLUX_NOMINAL_BGS
                    kterm=0.114, # KERM
                    ebv_r_coeff=2.165,
                    fiber_diameter_arcsec=1.52):

    # AR : sky <- spectro. sky in nMgy / arcsec**2 (corrected by throughput)
    # AR : transparency, airmass <- GFA
    # AR : ffrac_psf <- GFA fiber_fracflux
    # AR : ffrac_elg <- GFA fiber_fracflux_elg
    # AR : ffrac_bgs <- GFA fiber_fracflux_bgs
    # AR : ffrac_*_nom and kterm <- from GFA [ffrac_psf_nom~0.582, ffrac_elg_nom~0.424, ffrac_bgs_nom~0.195]
    #
    # AR nominal values

    exptime  = table["EXPTIME"]
    skymag   = table["SKY_MAG_R_SPEC"]
    sky      = 10**(-0.4*(skymag-22.5)) # nMgy/arcsec**2
    ebv      = table["EBV"]
    transparency = table["TRANSPARENCY_GFA"]
    airmass      = table["AIRMASS"]
    ffrac_psf    = table["FIBER_FRACFLUX_GFA"] #
    ffrac_elg    = table["FIBER_FRACFLUX_ELG_GFA"] #
    ffrac_bgs    = table["FIBER_FRACFLUX_BGS_GFA"] #



    exptime_nom = 1000.0  # AR seconds
    sky_nom = 3.73  # AR nMgy/arcsec**2
    fflux_bright_nom = (
        15.8  # AR nMgy/arcsec**2 (r=19.5 mag for de Vaucouleurs rhalf=1.5" BGS)
    )
    fflux_backup_nom = 27.5  # AR nMgy/arcsec**2 (r=18.9 mag star)
    # AR airmass term
    airfac = 10.0 ** (kterm * (airmass - 1.0) / 2.5)
    # AR ebv term
    ebvfac = 10.0 ** (ebv_r_coeff * ebv / 2.5)
    # AR sky readnoise
    sky_rdn = 0.932  # AR nMgy/arcsec**2

    fiber_area_arcsec2 = np.pi*(fiber_diameter_arcsec/2.)**2

    # AR "limit" fiber flux
    fflux_bright = (
        ffrac_bgs * transparency / airfac * fflux_bright_nom / fiber_area_arcsec2
    )
    fflux_backup = (
        ffrac_psf * transparency / airfac * fflux_backup_nom / fiber_area_arcsec2
    )
    # AR effective sky
    effsky_dark = (sky + sky_rdn * exptime_nom / exptime) / (1.0 + sky_rdn / sky_nom)
    effsky_bright = (sky + sky_rdn * exptime_nom / exptime + fflux_bright) / (
        1.0 + sky_rdn / sky_nom + fflux_bright / sky_nom
    )
    effsky_backup = (sky + sky_rdn * exptime_nom / exptime + fflux_backup) / (
        1.0 + sky_rdn / sky_nom + fflux_backup / sky_nom
    )
    # AR effective exposure time
    efftime_dark = (
        exptime
        * (ffrac_elg / ffrac_elg_nom * transparency / airfac) ** 2
        * (sky_nom / effsky_dark)
        / ebvfac ** 2
    )
    efftime_bright = (
        exptime
        * (ffrac_bgs / ffrac_bgs_nom * transparency / airfac) ** 2
        * (sky_nom / effsky_bright)
        / ebvfac ** 2
    )
    efftime_backup = (
        exptime
        * (ffrac_psf / ffrac_psf_nom * transparency / airfac) ** 2
        * (sky_nom / effsky_backup)
        / ebvfac ** 2
    )

    # set to -1 values with incorrect inputs
    bad=table["AIRMASS"]<0.99
    bad |=(table["FIBER_FRACFLUX_GFA"]==0)
    bad |=(table["TRANSPARENCY_GFA"]>2)
    efftime_dark[bad]=0.
    efftime_bright[bad]=0.
    efftime_backup[bad]=0.


    return efftime_dark , efftime_bright , efftime_backup

def compute_tsnr_values(cframe_filename,cframe_hdulist,night,expid,camera,specprod_dir, alpha_only=False) :
    """
    Computes TSNR values
    Args:
       cframe_filename: str, cframe file path
       cframe_hdulist: astropy.fits.HDUlist object
       night: int
       expid: int
       camera: str
       specprod_dir: str, production directory
       alpha_only: bool, set to True to only recompute alpha

    Returns: astropy.table.Table obkect with TSNR values
    """

    calib  = findfile('fluxcalib', night=night, expid=expid,
                      camera=camera, specprod_dir=specprod_dir)
    flat = cframe_hdulist[0].header['FIBERFLT']
    if 'SPECPROD' in flat:
        flat = flat.replace('SPECPROD', specprod_dir)
    elif 'SPCALIB' in flat:
        hdr  = fitsio.read_header(cframe_filename)
        flat = flat.replace('SPCALIB', getdep(hdr, 'DESI_SPECTRO_CALIB'))
    else:
        raise ValueError('Failed on flat retrieval for {}.'.format(hdr))

    iin = cframe_filename.replace('cframe', 'frame')
    sky = cframe_filename.replace('cframe', 'sky')
    psf = cframe_filename.replace('cframe', 'psf')

    frame=read_frame(iin, skip_resolution=True)
    fiberflat=read_fiberflat(flat)
    fluxcalib=read_flux_calibration(calib)
    skymodel=read_sky(sky)

    results, alpha = calc_tsnr2(frame, fiberflat=fiberflat,
                                skymodel=skymodel, fluxcalib=fluxcalib, alpha_only=alpha_only)

    table=Table()
    for k in results:
        table[k] = results[k].astype(np.float32)
    table["TSNR2_ALPHA_"+camera[0].upper()] = np.repeat(alpha,len(frame.flux))

    return table


def update_table(table1,table2,keys) :
    """ Replace or append rows of table1 with content of table2 indexed by keys

    Args:
        table1: astropy.table.Table
        table2: astropy.table.Table
        keys: list of str

    Returns astropy.table.Table
    """

    log = get_logger()

    v1=table1[keys[0]]
    v2=table2[keys[0]]
    if len(keys)>1 : # I don't know how of a better generic way to create a joined index
        v1=v1.astype("str")
        v2=v2.astype("str")
        for k in keys[1:] :
            v1=[i+j for i,j in zip(v1,table1[k].astype(str))]
            v2=[i+j for i,j in zip(v2,table2[k].astype(str))]

    replace = np.in1d(v1,v2)
    keep = ~replace

    log.info("keep {} entries, replace {}, add {}".format(np.sum(keep),np.sum(replace),len(table2)-np.sum(replace)))

    if np.sum(keep)>0 :
        return vstack([table1[keep],table2])
    else :
        return table2

def compute_summary_tables(summary_rows,efftime_config,preexisting_tsnr2_expid_table,preexisting_tsnr2_frame_table,specprod_dir) :
    """ Compute summary tables.

    Args:
      summary_rows: list of dictionnaries
      output_filename: str, output filename
      efftime_config: dictionnary with scaling factors from TSNR2 to effective exp. time
      preexisting_tsnr2_expid_table: None or astropy.table.Table, update this table if not None
      preexisting_tsnr2_frame_table: None or astropy.table.Table, update this table if not None
      specprod_dir: str, production directory

    Returns tsnr2_expid_table , tsnr2_frame_table
    """
    log = get_logger()

    #- Create camera summary table; specify names to preserve column order
    colnames = list(summary_rows[0].keys())
    for row in summary_rows :
        if len(row.keys()) != len(colnames) :
            log.error("colnames={} but row={}".format(colnames,row))
            sys.exit(12)

    cam_summary = Table(rows=summary_rows, names=colnames)
    cam_summary.meta['EXTNAME'] = 'TSNR2_FRAME'

    tsnr2_colnames = [x for x in cam_summary.colnames if x.startswith('TSNR2_')]

    #- which rows go with which petals:
    ispetal = dict()
    for petal in range(10):
        ii  = (cam_summary['CAMERA'] == 'b'+str(petal))
        ii |= (cam_summary['CAMERA'] == 'r'+str(petal))
        ii |= (cam_summary['CAMERA'] == 'z'+str(petal))
        ispetal[petal] = ii

    #- Distill into exposure summary per-petal
    rows = list()

    #- The unique key is the exposure Id
    for expid in np.unique(cam_summary['EXPID'] ) :
        ii = (cam_summary['EXPID'] == expid)

        row = dict()
        for k in ["NIGHT","EXPID","TILEID","AIRMASS","EBV","SEEING_ETC","EFFTIME_ETC","SURVEY","GOALTYPE","MINTFRAC","FAPRGRM","FAFLAVOR","GOALTIME"] :
            row[k]=cam_summary[k][ii][0]
        # mean
        row["EXPTIME"]=float(np.mean(cam_summary['EXPTIME'][ii]))

        #- Per EXPID TSNR2 is summed over cameras, averaged over petals
        for colname in tsnr2_colnames:
            tsnr2_petal = list()  #- TSNR^2 summed over cameras, per petal
            for petal in range(10):
                jj = ii & ispetal[petal]
                if np.any(jj):
                    tsnr2_petal.append(np.sum(cam_summary[colname][jj]))
            row[colname] = np.mean(tsnr2_petal) # mean of petals (each being median of valid fibers)

        rows.append(row)

    colnames = list(rows[0].keys())
    exp_summary = Table(rows=rows, names=colnames)
    exp_summary.meta['EXTNAME'] = 'TSNR2_EXPID'


    # check the production exposure table
    for night in np.unique(exp_summary["NIGHT"]) :
        prod_table_filename = os.path.join(specprod_dir,"exposure_tables/{}/exposure_table_{}.csv".format(night//100,night))
        prod_table = Table.read(prod_table_filename)
        missing = (~(np.in1d(prod_table["EXPID"],exp_summary["EXPID"])))&(prod_table["TILEID"]>0)
        nmissing=np.sum(missing)
        if nmissing>0 :

            ucam=np.unique(cam_summary["CAMERA"])

            for i in np.where(missing)[0] :
                entry={}
                entry["EXPID"]=prod_table["EXPID"][i]
                entry["NIGHT"]=night
                entry["TILEID"]=prod_table["TILEID"][i]
                entry["AIRMASS"]=0.
                entry["EBV"]=0.
                entry["EXPTIME"]=prod_table["EXPTIME"][i]
                entry['SEEING_ETC']=0.
                entry['EFFTIME_ETC']=0.
                entry["SURVEY"]="unknown"
                entry["GOALTYPE"]="unknown"
                entry["MINTFRAC"]=0.9
                entry["FAPRGRM"]="unknown"
                entry["FAFLAVOR"]="unknown"
                entry["GOALTIME"]=0.

                vals=[]
                for j,k in enumerate(exp_summary.dtype.names) :
                    if k in entry :
                        vals.append(entry[k])
                    else :
                        vals.append(0.)
                log.warning("Adding missing exposure {}".format(vals))
                exp_summary.add_row(vals)

                # same for other table
                for cam in ucam :
                    entry["CAMERA"]=cam
                    vals=[]
                    for j,k in enumerate(cam_summary.dtype.names) :
                        if k in entry :
                            vals.append(entry[k])
                        else :
                            vals.append(0.)
                    log.debug("Adding missing exposure.cam {}".format(vals))
                    cam_summary.add_row(vals)


    if preexisting_tsnr2_expid_table is not None :
        log.debug("Update to preexisting")

        # backward compatibility issue
        for k in ["SURVEY","GOALTYPE","FAPRGRM","FAFLAVOR"] :
            nentries=len(preexisting_tsnr2_expid_table)
            if k not in preexisting_tsnr2_expid_table.dtype.names :
                log.warning("adding column {}".format(k))
                preexisting_tsnr2_expid_table[k] = np.array(np.repeat("unknown",nentries),dtype='<U16')
        for k in ["GOALTIME","MINTFRAC","SEEING_ETC","EFFTIME_ETC","AIRMASS","EBV"]:
            if k not in preexisting_tsnr2_expid_table.dtype.names :
                log.warning("adding column {}".format(k))
                preexisting_tsnr2_expid_table[k] = np.array(np.repeat(0.,nentries),dtype=float)

        exp_summary = update_table(preexisting_tsnr2_expid_table,exp_summary,["EXPID"])
    if preexisting_tsnr2_frame_table is not None :
        log.debug("Update to preexisting")
        cam_summary = update_table(preexisting_tsnr2_frame_table,cam_summary,["EXPID","CAMERA"])

    log.info("Add effective times from TSNR2 values")
    exp_summary['ELG_EFFTIME_DARK']   = tsnr2_to_efftime(exp_summary['TSNR2_ELG'],"ELG","DARK")
    exp_summary['BGS_EFFTIME_BRIGHT'] = tsnr2_to_efftime(exp_summary['TSNR2_BGS'],"BGS","BRIGHT")
    if 'TSNR2_LYA' in exp_summary.colnames :
        exp_summary['LYA_EFFTIME_DARK'] = tsnr2_to_efftime(exp_summary['TSNR2_LYA'],"LYA","DARK")

    exp_summary['EFFTIME_SPEC'] = exp_summary['ELG_EFFTIME_DARK']
    ii = (exp_summary['GOALTYPE']=='bright')|(exp_summary['GOALTYPE']=='backup')
    exp_summary['EFFTIME_SPEC'][ii] = exp_summary['BGS_EFFTIME_BRIGHT'][ii]

    # sort table rows
    ii = np.argsort(exp_summary['EXPID'])
    exp_summary = exp_summary[ii]
    vals=["{}-{}".format(e,c) for e,c in zip(cam_summary['EXPID'],cam_summary['CAMERA'])]
    ii = np.argsort(vals)
    cam_summary = cam_summary[ii]

    if 'TSNR2_ALPHA' in exp_summary.dtype.names : exp_summary.remove_column('TSNR2_ALPHA')

    # sort table columns
    neworder=['NIGHT','EXPID','TILEID','SURVEY','FAPRGRM','FAFLAVOR','EXPTIME','EFFTIME_SPEC','GOALTIME','GOALTYPE','MINTFRAC','AIRMASS','EBV','SEEING_ETC','EFFTIME_ETC','TSNR2_ELG','TSNR2_QSO','TSNR2_LRG','TSNR2_LYA','TSNR2_BGS','ELG_EFFTIME_DARK','BGS_EFFTIME_BRIGHT','LYA_EFFTIME_DARK','TRANSPARENCY_GFA','FWHM_ASEC_GFA','FIBER_FRACFLUX_GFA','FIBER_FRACFLUX_ELG_GFA','FIBER_FRACFLUX_BGS_GFA','SKY_MAG_AB_GFA','SKY_MAG_G_SPEC','SKY_MAG_R_SPEC','SKY_MAG_Z_SPEC','EFFTIME_GFA','EFFTIME_DARK_GFA','EFFTIME_BRIGHT_GFA','EFFTIME_BACKUP_GFA']

    if not np.all(np.in1d(exp_summary.dtype.names,neworder)) :
        missing=~np.in1d(exp_summary.dtype.names,neworder)
        print("error, missing keys {} in new order list".format(np.array(exp_summary.dtype.names)[missing]))
        print("new order list:",sorted(neworder))
        print("current table:",sorted(exp_summary.dtype.names))
        sys.exit(12)
    newtable=Table()
    newtable.meta=exp_summary.meta
    for k in neworder :
        if k in exp_summary.dtype.names :
            newtable[k]=exp_summary[k]
        else :
            newtable[k]=np.zeros(len(exp_summary))
    exp_summary=newtable

    return exp_summary, cam_summary

def write_summary_tables(tsnr2_expid_table,tsnr2_frame_table,output_fits_filename,output_csv_filename=None) :
    """ Writes a summary fits file.

    Args:
     tsnr2_expid_table: astropy.table.Table
     tsnr2_frame_table: astropy.table.Table
     output_fits_filename: str, output fits filename
     output_csv_filename: str, output csv filename

    Returns nothing
    """
    log = get_logger()

    hdus = fits.HDUList()
    hdus.append(fits.convenience.table_to_hdu(tsnr2_expid_table))
    hdus.append(fits.convenience.table_to_hdu(tsnr2_frame_table))

    tmpfile = output_fits_filename+'.tmp'
    hdus.writeto(tmpfile, overwrite=True)
    os.rename(tmpfile,  output_fits_filename)

    log.info('Successfully wrote {}'.format(output_fits_filename))

    # also write first table as csv
    if output_csv_filename is not None :
        for k in tsnr2_expid_table.keys() :
            if k.find("TIME")>=0 or k.find("SNR2")>=0 :
                try :
                    tsnr2_expid_table[k]=np.around(tsnr2_expid_table[k].astype(float),1)
                except ValueError as e :
                    log.warning("cannot change number of digits for col {}: {}".format(k,e))
            if k.find("SEEING")>=0 or k.find("FWHM")>=0 or k.find("FIBER_FRACFLUX")>=0 or k.find("TRANS")>=0 or k.find("MAG")>=0 :
                try :
                    tsnr2_expid_table[k]=np.around(tsnr2_expid_table[k].astype(float),3)
                except ValueError as e :
                    log.warning("cannot change number of digits for col {}: {}".format(k,e))
        tsnr2_expid_table.write(output_csv_filename,overwrite=True)
        log.info('Successfully wrote {}'.format(output_csv_filename))

def func(prod,night,expid,camera,recompute,alpha_only,details_dir) :
    """
    Compute TSNR for this night exposure camera (code in separate function for multiprocessing)

    Args:
        prod: str, production dir name
        night: int, night
        expid: int, expid
        camera: str, camera
        recompute: bool, recompute tsnr if true even if present in frame
        alpha_only: bool, only recompute alpha
        details_dir: str or None, save details per frame in this directory if not None

    Returns a dictionnary with NIGHT,EXPID,TILEID,EXPTIME,CAMERA, and the TSNR2 values for this camera
    """
    log = get_logger()

    cframe_filename = '{}/exposures/{}/{:08d}/cframe-{}-{:08d}.fits'.format(prod, night, expid, camera, expid)
    if not os.path.isfile(cframe_filename) :
        return None

    cframe_hdulist = fits.open(cframe_filename)
    hdr    = cframe_hdulist[0].header
    flavor = hdr['FLAVOR']
    if flavor != 'science':
        return None

    log.info("Processing {}".format(cframe_filename))

    prog   = hdr['PROGRAM']
    tileid = hdr['TILEID']

    table = None
    compute_tsnr = True

    #- check if already computed in cframe
    if "SCORES" in cframe_hdulist and not recompute:
        table = Table(cframe_hdulist["SCORES"].data)
        key = "TSNR2_ELG_"+camera[0].upper()
        if key in table.colnames :
            log.debug("Use TSNR values in cframe file")
            compute_tsnr = False

    #- check if already computed in details file
    table_output_filename = None
    if details_dir is not None and not recompute :
        table_output_filename= f'{details_dir}/{night}/{expid:08d}/tsnr-{camera}-{expid:08d}.fits'
        if os.path.isfile(table_output_filename):
            log.debug(f'Using previously generated {table_output_filename}')
            table = Table.read(table_output_filename)
            compute_tsnr = False

    #- compute tsnr
    if compute_tsnr :
        tsnr_table = compute_tsnr_values(cframe_filename,cframe_hdulist,night,expid,camera,specprod_dir=prod, alpha_only=alpha_only)

        if table is None :
            table = tsnr_table
        else :
            for k in tsnr_table.columns :
                table[k] = tsnr_table[k]

    fibermap = cframe_hdulist["FIBERMAP"].data

    table['FIBER']       = fibermap['FIBER']
    table['TARGETID']    = fibermap['TARGETID']
    table.meta['NIGHT']  = night
    table.meta['EXPID']  = expid
    table.meta['TILEID'] = tileid
    table.meta['CAMERA'] = camera
    table.meta['EXTNAME'] = 'TSNR2'

    #- Write per-expid per-camera output if requested
    if compute_tsnr and table_output_filename is not None :
        Path(os.path.dirname(table_output_filename)).mkdir(parents=True,exist_ok=True)
        tmpfile = table_output_filename +'.tmp'
        table.write(tmpfile, format='fits', overwrite=True)
        os.rename(tmpfile, table_output_filename)
        log.debug('Successfully wrote {}.'.format(table_output_filename))

    #- Append to summary.
    entry = dict()
    entry['NIGHT'] = np.int32(night)
    entry['EXPID'] = np.int32(expid)
    entry['TILEID'] = np.int32(tileid)
    entry['EXPTIME'] = np.float32(hdr['EXPTIME'])
    entry['AIRMASS'] = np.float32(hdr['AIRMASS'])
    if 'EBV' in fibermap.dtype.names :
        entry['EBV'] = np.median(fibermap["EBV"])
    else :
        entry['EBV'] = 0.
    if "SEEING" in hdr :
        entry['SEEING_ETC'] = np.float32(hdr['SEEING'])
    else :
        entry['SEEING_ETC'] = 0.
    if "ACTTEFF" in hdr :
        entry['EFFTIME_ETC'] = np.float32(hdr['ACTTEFF'])
    else :
        entry['EFFTIME_ETC'] = 0.

    entry['CAMERA'] = camera
    for key in table.colnames:
        if key.startswith('TSNR2_'):
            #- TSNR2_{TRACER}_{BAND} -> TSNR2_{TRACER}
            short_key = '_'.join(key.split('_')[0:2])
            ok=(table[key]!=0)
            if np.sum(ok)>0 :
                entry[short_key]=np.median(table[key][ok]).astype(np.float32)
            else :
                entry[short_key]=0.
        if key.startswith('TSNR2_ALPHA'):
            entry['TSNR2_ALPHA'] = np.median(table[key]).astype(np.float32)

    #- Add information from targeting
    fibermap_header = cframe_hdulist["FIBERMAP"].header
    for k in ["SURVEY","GOALTYPE","FAPRGRM","FAFLAVOR"] :
        if k in fibermap_header :
            entry[k] = fibermap_header[k].strip().lower()
        else :
            entry[k] = "unknown"

    if "FAFLAVOR" in fibermap_header :
        faflavor=fibermap_header["FAFLAVOR"].strip().lower()

        if entry["FAPRGRM"] == "unknown"  :
            entry["FAPRGRM"] = faflavor.replace("sv1","").replace("sv2","").replace("cmx","")

        if entry["SURVEY"]=="unknown" :
            if faflavor.find("sv1")>=0. : entry["SURVEY"]="sv1"
            elif faflavor.find("sv2")>=0. : entry["SURVEY"]="sv2"
            elif faflavor.find("cmx")>=0. : entry["SURVEY"]="cmx"

    if entry["GOALTYPE"]=="unknown" :
        if entry["FAPRGRM"].find("qso")>=0. or entry["FAPRGRM"].find("lrg")>=0.  or entry["FAPRGRM"].find("elg")>=0. or entry["FAPRGRM"].find("dark")>=0. :
            entry["GOALTYPE"]="dark"
        elif entry["FAPRGRM"].find("mws")>=0. or entry["FAPRGRM"].find("bgs")>=0. or entry["FAPRGRM"].find("bright")>=0. :
            entry["GOALTYPE"]="bright"

    k="MINTFRAC"
    if k in fibermap_header :
        entry[k] = fibermap_header[k]
    else :
        entry[k] = 0.9


    k="GOALTIME"
    if k in fibermap_header :
        entry[k] = fibermap_header[k]
    else :
        entry[k] = 0.

    cframe_hdulist.close()
    return entry

def _func(arg) :
    return func(**arg)

def func2(night,expid,specprod_dir) :
    mags = compute_skymag(night,expid,specprod_dir)
    entry = {'NIGHT':night,'EXPID':expid,'SKY_MAG_G':mags[0],'SKY_MAG_R':mags[1],'SKY_MAG_Z':mags[2]}
    print(entry)
    return(entry)

def _func2(arg) :
    return func2(**arg)

def add_skymags_columns(exposure_table,skymags_table) :
    e2i = {e:i for i,e in enumerate(skymags_table["EXPID"])}
    jj=[]
    ii=[]
    for j,e in enumerate(exposure_table["EXPID"]) :
        if e in e2i :
            jj.append(j)
            ii.append(e2i[e])
        cols=["SKY_MAG_G","SKY_MAG_R","SKY_MAG_Z"]
        for col in cols :
            if col in skymags_table.dtype.names :
                col2=col+"_SPEC"
                if col2 not in exposure_table.dtype.names :
                    exposure_table[col2] = np.zeros(len(exposure_table),dtype=float)
                exposure_table[col2][jj] = skymags_table[col][ii]


def main():
    log = get_logger()

    args=parse()
    if args.prod is None:
        args.prod = specprod_root()
    elif args.prod.find("/")<0 :
        args.prod = specprod_root(args.prod)

    if not args.outfile.endswith(".fits") :
        print("Output filename '{}' is incorrect. It has to end with '.fits'.".format(args.outfile))
        sys.exit(1)

    log.info('outfile = {}'.format(args.outfile))
    if args.details_dir is not None : log.info('details-dir = {}'.format(args.details_dir))

    log.info('prod = {}'.format(args.prod))


    if args.cameras is None:
        petals  = np.arange(10).astype(str)
        cameras = [x[0] + x[1] for x in itertools.product(['b', 'r', 'z'], petals.astype(np.str))]
    else:
        cameras = args.cameras.split(',')

    if args.expids is not None:
        expids = [np.int(x) for x in args.expids.split(',')]
    else:
        expids = None

    if args.nights is None:
        dirnames = sorted(glob.glob('{}/exposures/*'.format(args.prod)))
        nights=[]
        for dirname in dirnames :
            try :
                night=int(os.path.basename(dirname))
                nights.append(night)
            except ValueError as e :
                log.warning("ignore {}".format(dirname))
    else :
        nights=[int(val) for val in args.nights.split(",")]

    log.info('cameras = {}'.format(cameras))
    log.info("nights = {}".format(nights))
    if expids is not None : log.info('expids = {}'.format(expids))

    efftime_config_filename = args.efftime_config
    if efftime_config_filename is None :
        efftime_config_filename  = resource_filename('desispec', 'data/tsnr/tsnr-efftime.yaml')
    with open(efftime_config_filename) as f:
        efftime_config = yaml.load(f, Loader=yaml.FullLoader)
    log.info("Eff. time scale factors = {}".format(efftime_config))

    preexisting_tsnr2_expid_table = None
    preexisting_tsnr2_frame_table = None
    if args.update and os.path.isfile(args.outfile) :
        log.info("Will append pre-existing table {}".format(args.outfile))
        preexisting_tsnr2_expid_table = Table.read(args.outfile,"TSNR2_EXPID")
        preexisting_tsnr2_frame_table = Table.read(args.outfile,"TSNR2_FRAME")


    # starting computing
    # one night at a time

    summary_rows  = list()

    for count,night in enumerate(nights) :

        dirnames = sorted(glob.glob('{}/exposures/{}/*'.format(args.prod,night)))
        night_expids=[]
        for dirname in dirnames :
            try :
                expid=int(os.path.basename(dirname))
                night_expids.append(expid)
            except ValueError as e :
                log.warning("ignore {}".format(dirname))
        if expids is not None :
            night_expids = np.intersect1d(expids,night_expids)
            if night_expids.size == 0 :
                continue
        log.info("{} {}".format(night,night_expids))

        #pool = multiprocessing.Pool(ncpu)
        func_args = []
        for expid in night_expids :
            for camera in cameras:
                func_args.append({'prod':args.prod,'night':night,'expid':expid,'camera':camera,
                                  'recompute':args.recompute,'alpha_only':args.alpha_only,'details_dir':args.details_dir})

        if args.nproc == 1 :
            for func_arg in func_args :
                entry = func(**func_arg)
                if entry is not None :
                    summary_rows.append(entry)
        else :
            log.info("Multiprocessing with {} procs".format(args.nproc))
            pool = multiprocessing.Pool(args.nproc)
            results  =  pool.map(_func, func_args)
            for entry in results :
                if entry is not None :
                    summary_rows.append(entry)
            pool.close()
            pool.join()


        # write result after every other night
        if len(summary_rows)>0 :
            tmpfilename=args.outfile.replace(".fits","_tmp.fits")
            tsnr2_expid_table,tsnr2_frame_table = compute_summary_tables(summary_rows,efftime_config,preexisting_tsnr2_expid_table,preexisting_tsnr2_frame_table,args.prod)
            write_summary_tables(tsnr2_expid_table,tsnr2_frame_table,output_fits_filename=tmpfilename)
            log.info("wrote {} entries in tmp file {}".format(len(summary_rows),tmpfilename))


    tsnr2_expid_table,tsnr2_frame_table = compute_summary_tables(summary_rows,efftime_config,preexisting_tsnr2_expid_table,preexisting_tsnr2_frame_table,args.prod)


    if args.skymags is not None :
        skymags_table = Table.read(args.skymags)
        add_skymags_columns(tsnr2_expid_table,skymags_table)

    if args.compute_skymags is not None :
        skymag_rows=[]
        for count,night in enumerate(nights) :

            dirnames = sorted(glob.glob('{}/exposures/{}/*'.format(args.prod,night)))
            night_expids=[]
            for dirname in dirnames :
                try :
                    expid=int(os.path.basename(dirname))
                    night_expids.append(expid)
                except ValueError as e :
                    log.warning("ignore {}".format(dirname))
            if expids is not None :
                night_expids = np.intersect1d(expids,night_expids)
                if night_expids.size == 0 :
                    continue
            log.info("{} {}".format(night,night_expids))

            func_args = []
            for expid in night_expids :
                func_args.append({'night':night,'expid':expid,'specprod_dir':args.prod})

            if args.nproc == 1 :
                for func_arg in func_args :
                    entry = func(**func_arg)
                    if entry is not None :
                        skymag_rows.append(entry)
            else :
                log.info("Multiprocessing with {} procs".format(args.nproc))
                pool = multiprocessing.Pool(args.nproc)
                results  =  pool.map(_func2, func_args)
                for entry in results :
                    if entry is not None :
                        skymag_rows.append(entry)
                pool.close()
                pool.join()

        colnames = list(skymag_rows[0].keys())
        skymags_table = Table(rows=skymag_rows, names=colnames)
        add_skymags_columns(tsnr2_expid_table,skymags_table)

    if args.gfa_proc_dir is not None :
        gfa_table = read_gfa_data(args.gfa_proc_dir)

        e2i = {e:i for i,e in enumerate(gfa_table["SPECTRO_EXPID"])}
        jj=[]
        ii=[]
        for j,e in enumerate(tsnr2_expid_table["EXPID"]) :
            if e in e2i :
                jj.append(j)
                ii.append(e2i[e])

        cols=["TRANSPARENCY","FWHM_ASEC","FIBER_FRACFLUX","FIBER_FRACFLUX_ELG","FIBER_FRACFLUX_BGS","SKY_MAG_AB","AIRMASS",]
        for col in cols :
            if col in gfa_table.dtype.names :
                tsnr2_expid_table[col+"_GFA"]=np.zeros(len(tsnr2_expid_table),dtype=float)
                tsnr2_expid_table[col+"_GFA"][jj] = gfa_table[col][ii]


    if args.gfa_proc_dir is not None  and args.skymags is not None :

        efftime_dark, efftime_bright, efftime_backup = compute_efftime(tsnr2_expid_table[jj])
        for col in ["EFFTIME_DARK_GFA","EFFTIME_BRIGHT_GFA","EFFTIME_BACKUP_GFA"] :
            tsnr2_expid_table[col]=np.zeros(len(tsnr2_expid_table),dtype=float)
        tsnr2_expid_table["EFFTIME_DARK_GFA"][jj]=efftime_dark
        tsnr2_expid_table["EFFTIME_BRIGHT_GFA"][jj]=efftime_bright
        tsnr2_expid_table["EFFTIME_BACKUP_GFA"][jj]=efftime_backup
        goaltype=tsnr2_expid_table["GOALTYPE"]
        tsnr2_expid_table["EFFTIME_GFA"] = tsnr2_expid_table["EFFTIME_DARK_GFA"] # default
        tsnr2_expid_table["EFFTIME_GFA"][goaltype=="bright"]=tsnr2_expid_table["EFFTIME_BRIGHT_GFA"][goaltype=="bright"]
        tsnr2_expid_table["EFFTIME_GFA"][goaltype=="backup"]=tsnr2_expid_table["EFFTIME_BACKUP_GFA"][goaltype=="backup"]

    # end of loop on nights
    if len(summary_rows)>0 :

        write_summary_tables(tsnr2_expid_table,tsnr2_frame_table,output_fits_filename=args.outfile,output_csv_filename=args.outfile.replace(".fits",".csv"))

        # remove temporary file if successful
        if os.path.isfile(args.outfile) :
            tmpfilename=args.outfile.replace(".fits","_tmp.fits")
            if os.path.isfile(tmpfilename) :
                log.info("rm temporary file {}".format(tmpfilename))
                os.unlink(tmpfilename)
            tmpfilename=args.outfile.replace(".fits","_tmp.csv")
            if os.path.isfile(tmpfilename) :
                log.info("rm temporary file {}".format(tmpfilename))
                os.unlink(tmpfilename)
    else :
        log.error("no valid exposures added")


    if args.tile_completeness is not None :
        # reread the exposure table
        exposure_table = Table.read(args.outfile)
        new_tile_table = compute_tile_completeness_table(exposure_table,args.prod,auxiliary_table_filenames=args.aux)
        if os.path.isfile(args.tile_completeness) :
            previous_table = Table.read(args.tile_completeness)
            new_tile_table = merge_tile_completeness_table(previous_table,new_tile_table)
        new_tile_table.write(args.tile_completeness,overwrite=True)
        log.info("wrote {}".format(args.tile_completeness))


if __name__ == '__main__':
    main()
