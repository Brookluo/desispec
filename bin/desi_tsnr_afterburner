#!/usr/bin/env python
'''
Calculate stand alone tsnr tables for a given desispec prod.
'''

import os
import glob
import itertools
import argparse
import astropy.io.fits as fits
import numpy as np

from   desispec.io import read_sky
from   desispec.io import read_fiberflat
from   pathlib import Path
from   desispec.io.meta import findfile, specprod_root
from   desispec.calibfinder import CalibFinder
from   desispec.io import read_frame
from   desispec.io import read_fibermap
from   desispec.io.fluxcalibration import read_flux_calibration
from   desiutil.log import get_logger
from   desispec.tsnr import calc_tsnr2
from   astropy.table import Table, vstack
from   desiutil.depend import getdep

def parse(options=None):
    parser = argparse.ArgumentParser(
                description="Calculate template S/N ratio for exposures")
    parser.add_argument('--outfile', type=str, default=None, required=False,
                        help = 'Output summary file')
    parser.add_argument('--details-dir', type=str, required=False,
                        help = 'Dir. to write per-exposure per-camera files with per-fiber tSNR details')
    parser.add_argument('--prod', type = str, default = None, required=False,
                        help = 'Path to input reduction, e.g. /global/cfs/cdirs/desi/spectro/redux/blanc/')
    parser.add_argument('--cameras', type = str, default = None, required=False,
                        help = 'Cameras to reduce (comma separated)')
    parser.add_argument('--expids', type = str, default = None, required=False,
                        help = 'Comma separated list of exp ids to process')
    parser.add_argument('--night', type = int, default = None, required=False,
                        help = 'Restrict to this night only')
    args = None
    if options is None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(options)
    return args


def main():
    log = get_logger()

    args=parse()
    if args.prod is None:
        args.prod = specprod_root()

    log.info('outfile = {}'.format(args.outfile))
    log.info('details-dir = {}'.format(args.details_dir))
    log.info('prod = {}'.format(args.prod))
    log.info('cameras = {}'.format(args.cameras))
    log.info('expids = {}'.format(args.expids))

    petals = np.arange(10).astype(str)

    if args.cameras is None:
        cameras = [x[0] + x[1] for x in itertools.product(['b', 'r', 'z'], petals.astype(np.str))]
    else:
        cameras = args.cameras.split(',')
    if args.expids is not None:
        expids = [np.int(x) for x in args.expids.split(',')]
    else:
        expids = None
    
    if args.night is None:
        args.night = '*'

    cframes = {}
    for cam in cameras:
        cframes[cam] = sorted(glob.glob('{}/exposures/{}/*/cframe-{}-*.fits'.format(args.prod, args.night, cam)))
 
    sci_frames = {}

    for cam in cameras:
        sci_frames[cam] = []
    
        for cframe in cframes[cam]:
            hdul = fits.open(cframe)
            hdr  = hdul[0].header 
        
            flavor = hdr['FLAVOR']
            prog = hdr['PROGRAM']
            expid = hdr['EXPID']
        
            if expids is not None:
                if expid not in expids:
                    continue
            
            if flavor == 'science':
                sci_frames[cam].append(cframe)

            hdul.close()
        
        log.info('{} science frames to reduce for {}.'.format(len(sci_frames[cam]), cam))

    summary_rows  = list()
    for cam in cameras:
        for kk, x in enumerate(sci_frames[cam]):
            cframe = fits.open(x)
            hdr  = cframe[0].header
            if hdr['PROGRAM'].startswith('SV1'):
                night  = hdr['NIGHT']
                expid  = hdr['EXPID']
                camera = hdr['CAMERA']
                tileid = hdr['TILEID']

                calib  = findfile('fluxcalib', night=night, expid=expid,
                                  camera=camera, specprod_dir=args.prod)
            
                flat = cframe[0].header['FIBERFLT']

                if 'SPECPROD' in flat:
                    flat = flat.replace('SPECPROD', args.prod)
                
                elif 'SPCALIB' in flat:
                    flat = flat.replace('SPCALIB', getdep(hdr, 'DESI_SPECTRO_CALIB'))

                else:
                    raise ValueError('Failed on flat retrieval for {}.'.format(hdr))
                
                iin = x.replace('cframe', 'frame')
                sky = x.replace('cframe', 'sky')
                psf = sky.replace('sky', 'psf')

                if args.details_dir is not None:
                    out = f'{args.details_dir}/{night}/{expid:08d}/tsnr-{camera}-{expid:08d}.fits'
                else:
                    out = None
                
                if out is not None and os.path.exists(out):
                    log.info(f'Using previously generated {out}')
                    table = Table.read(out)
                else:
                    frame=read_frame(iin, skip_resolution=True)
                    fiberflat=read_fiberflat(flat)
                    fluxcalib=read_flux_calibration(calib)
                    skymodel=read_sky(sky)
            
                    results, alpha = calc_tsnr2(frame, fiberflat=fiberflat,
                            skymodel=skymodel, fluxcalib=fluxcalib)

                    table=Table()
                    for k in results:
                        table[k] = results[k].astype(np.float32)

                    table['FIBER']       = frame.fibermap['FIBER']
                    table['TARGETID']    = frame.fibermap['TARGETID']
                
                    table.meta['NIGHT']  = night
                    table.meta['EXPID']  = expid
                    table.meta['TILEID'] = tileid
                    table.meta['CAMERA'] = camera
                    table.meta['TSNRALPH']  = alpha
                    table.meta['EXTNAME'] = 'TSNR2'

                #- Write per-expid per-camera output if requested
                if out is not None:
                    Path(os.path.dirname(out)).mkdir(parents=True,exist_ok=True)
                    tmpfile = out+'.tmp'
                    table.write(tmpfile, format='fits', overwrite=True)
                    os.rename(tmpfile, out)
                    log.info('Successfully wrote {}.'.format(out))
                
                # Append to summary. 
                entry = dict()
                entry['NIGHT'] = np.int32(night)
                entry['EXPID'] = np.int32(expid)
                entry['TILEID'] = np.int32(tileid)
                entry['CAMERA'] = camera
                for key in table.colnames:
                    if key.startswith('TSNR2_'):
                        #- TSNR2_{TRACER}_{BAND} -> TSNR2_{TRACER}
                        short_key = '_'.join(key.split('_')[0:2])
                        entry[short_key]=np.median(table[key]).astype(np.float32)

                entry['ALPHA'] = table.meta['TSNRALPH']

                summary_rows.append(entry)

                log.info('{} {:08d} {}: Reduced {} of {}.'.format(
                    night, expid, cam, kk, len(sci_frames[cam])))

        cframe.close()

    #- If not writing a summary file, we're done
    if args.outfile is None:
        return

    #- Create camera summary table; specify names to preserve column order
    colnames = list(summary_rows[0].keys())
    cam_summary = Table(rows=summary_rows, names=colnames)
    cam_summary.meta['EXTNAME'] = 'TSNR2_FRAME'

    tsnr2_colnames = [x for x in cam_summary.colnames if x.startswith('TSNR2_')]

    #- which rows go with which petals:
    ispetal = dict()
    for petal in range(10):
        ii  = (cam_summary['CAMERA'] == 'b'+str(petal))
        ii |= (cam_summary['CAMERA'] == 'r'+str(petal))
        ii |= (cam_summary['CAMERA'] == 'z'+str(petal))
        ispetal[petal] = ii

    #- Distill into exposure summary per-petal
    rows = list()
    for night, expid, tileid in sorted(set(zip(
            cam_summary['NIGHT'],
            cam_summary['EXPID'],
            cam_summary['TILEID']
            ))):
        #- TILEID and NIGHT are unique to EXPID, so only filter on EXPID
        ii = (cam_summary['EXPID'] == expid)

        row = dict(NIGHT=night, EXPID=expid, TILEID=tileid)

        #- Per EXPID TSNR2 is summed over cameras, averaged over petals
        for colname in tsnr2_colnames:
            tsnr2_petal = list()  #- TSNR^2 summed over cameras, per petal
            for petal in range(10):
                jj = ii & ispetal[petal]
                if np.any(jj):
                    tsnr2_petal.append(np.sum(cam_summary[colname][jj]))

            row[colname] = np.mean(tsnr2_petal)

        rows.append(row)

    colnames = list(rows[0].keys())
    exp_summary = Table(rows=rows, names=colnames)
    exp_summary.meta['EXTNAME'] = 'TSNR2_EXPID'

    hdus = fits.HDUList()
    hdus.append(fits.convenience.table_to_hdu(exp_summary))
    hdus.append(fits.convenience.table_to_hdu(cam_summary))

    tmpfile = args.outfile+'.tmp'
    hdus.writeto(tmpfile, overwrite=True)
    os.rename(tmpfile, args.outfile)

    log.info('Successfully wrote {}'.format(args.outfile))

    
if __name__ == '__main__':
    main()
