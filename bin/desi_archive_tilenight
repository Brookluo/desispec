#!/usr/bin/env python

"""
Utility script to remove archive tiles for the merged target list (MTL).
"""

import os, sys, glob
import argparse
import subprocess
import shutil

from astropy.table import Table

from desiutil.log import get_logger
from desispec.io import specprod_root, findfile

def archivetile(tiledir, archivedir, dryrun=False):
    """
    Archive tiledir to archivedir, leaving symlink behind

    Args:
        tiledir: full path to tiles/cumulative/TILEID/LASTNIGHT
        archivedir: full path to tiles/archive/TILEID/ARCHIVEDATE

    Options:
        dryrun: if True, print messages but don't move directories.
    """
    log = get_logger()
    if os.path.isdir(archivedir):
        log.info(f'{archivedir} already exists')
        return

    if not os.path.isdir(tiledir):
        log.error(f'{tiledir} missing ... skipping')
        return

    if dryrun:
        log.info(f'Dry run: archive {tiledir} -> {archivedir}')
    else:
        #- Move tiledir -> archivedir
        outdir = os.path.dirname(archivedir)
        os.makedirs(outdir, exist_ok=True)
        shutil.move(tiledir, archivedir)

        #- Create relative link from original tiledir -> new archivedir
        src = os.path.relpath(archivedir, os.path.dirname(tiledir))
        dst = tiledir
        os.symlink(src, dst)

        #- Remove write access
        err = freezedir(archivedir, dryrun=dryrun)
        if err != 0:
            log.error(f'problem removing write access from {archivedir}')


def freezedir(path, dryrun=False):
    """
    Remove write permission from path unless dryrun

    Args:
        path (str): path to directory to remove

    Options:
        dryrun: if True, print info but don't actually remove write access

    Returns non-zero error code upon failure (not an exception)
    """
    log = get_logger()
    err = 0
    if not os.path.isdir(path):
        log.error(f'Not a directory; skipping {path}')
        err = 1
    elif not os.access(path, os.W_OK):
        log.info(f'{path} already frozen')
    else:
        if dryrun:
            log.info(f'Dry run: freeze {path}')
        else:
            log.info(f'Freezing {path}')
            cmd = f'chmod -R a-w {path}'
            err = subprocess.call(cmd.split())
            if err != 0:
                log.error(f'Freezing {path} failed')

    return err

#-------------------------------------------------------------------------

parser = argparse.ArgumentParser(
        description='Remove write permissions from exposures and '
                    'cumulative redshift directories for a tile/night, '
                    'e.g. after accepting that tile as done')
parser.add_argument('-t', '--tileid', type=int,
        help='archive only this TILEID')
parser.add_argument('-n', '--night', type=int,
        help='archive only tiles observed on this LASTNIGHT')
parser.add_argument('-p', '--prod', type=int,
        help = 'Path to input reduction, e.g. '
               '/global/cfs/cdirs/desi/spectro/redux/daily, '
               'or simply prod version, like daily. '
               'Default is $DESI_SPECTRO_REDUX/$SPECPROD.')
parser.add_argument('--specstatus', type=str,
        help='tiles-specstatus.ecsv file to use; archive any tiles with ZDONE=true and ARCHIVEDATE>0')
parser.add_argument('--dry-run', action='store_true',
        help='print what directories to archive, without archiving them')
parser.add_argument('--only-tiles', action='store_true',
        help="archive only tiles dirs; don't freeze exposures, preproc")

args = parser.parse_args()
log = get_logger()

if args.prod is None:
    reduxdir = specprod_root()
elif args.prod.count("/") == 0:
    reduxdir = specprod_root(args.prod)
else:
    reduxdir = args.prod

if args.specstatus is None:
    args.specstatus = os.path.expandvars('$DESI_ROOT/survey/ops/surveyops/trunk/ops/tiles-specstatus.ecsv')

if not os.path.exists(args.specstatus):
    log.critical(f'Missing {args.specstatus}')
    sys.exit(1)

log.info(f'Reading tiles from {args.specstatus}')
tiles = Table.read(args.specstatus)
keep = (tiles['SURVEY'] == 'main') | (tiles['SURVEY'] == 'sv3')
keep &= (tiles['ZDONE'] == 'true') & (tiles['ARCHIVEDATE'] > 0)
if args.night is not None:
    log.info(f'Filtering to just LASTNIGHT={args.night}')
    keep &= tiles['LASTNIGHT'] == args.night
if args.tileid is not None:
    log.info(f'Filtering to just TILEID={args.tileid}')
    keep &= tiles['TILEID'] == args.tileid

tiles = tiles[keep]

ntiles = len(tiles)
log.info(f'{ntiles} tiles to archive')

#- find and read exposures table for that specprod
specprod = os.path.basename(reduxdir)
for expfile in [
    f'{reduxdir}/tsnr-exposures.fits',
    f'{reduxdir}/exposures-{specprod}.fits',
    ]:
    if os.path.exists(expfile):
        log.info(f'Reading exposures from {expfile}')
        #- HDU name changed mid-2021, so read HDU 1 for backwards compatibility
        #- with other productions (though this may only be used with daily)
        exposures = Table.read(expfile, 1)
        break
else:
    #- for-loop else only runs if loop finishes without break
    log.error(f'Unable to find an exposures files in {reduxdir}; not freezing exposures')
    exposures = None

for tileid, lastnight, archivedate in tiles['TILEID','LASTNIGHT','ARCHIVEDATE']:

    #- Archive tile
    tiledir = f'{reduxdir}/tiles/cumulative/{tileid}/{lastnight}'
    archivedir = f'{reduxdir}/tiles/archive/{tileid}/{archivedate}'
    archivetile(tiledir, archivedir, args.dry_run)

    #- Remove write access from any input preproc and exposures
    if (exposures is not None) and (not args.only_tiles):
        ii = (exposures['TILEID'] == tileid)
        for expnight, expid in exposures['NIGHT', 'EXPID'][ii]:
            for prefix in ['preproc', 'frame']:
                tmpfile = findfile(prefix, expnight, expid, 'b0',
                                   specprod_dir=reduxdir)
                path = os.path.dirname(tmpfile)
                err = freezedir(path, args.dry_run)
                if err != 0:
                    log.error(f'problem removing write access from {path}')

