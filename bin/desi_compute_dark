#!/usr/bin/env python


import sys,string
import astropy.io.fits as pyfits
import argparse
import numpy as np

from desispec import io
from desiutil.log import get_logger

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                 description="Compute a master dark",
                                 epilog='''
                                 Input is a list of raw dark images, possibly with various exposure times.
                                 Raw images are preprocessed without dark,mask,gain correction and without cosmic-ray masking.
                                 Only an optional bias correction is applied.
                                 The result is the median of the preprocessed images divided by their exposure time.
                                 We use for this the keyword EXPREQ in the raw image primary header, or EXPTIME if the former is absent.                                 ''')


parser.add_argument('-i','--image', type = str, default = None, required = True, nargs="*",
                    help = 'path of raws image fits files')
parser.add_argument('-o','--outfile', type = str, default = None, required = True,
                    help = 'output median image filename')
parser.add_argument('--camera',type = str, required = True,
                    help = 'header HDU (int or string)')
parser.add_argument('--bias', type = str, default = None, required=False,
                        help = 'bias image calibration file (standard preprocessing calibration is turned off)')

parser.add_argument('--cosmicsub', action = 'store_true',
                        help = 'perform comic ray subtraction (much slower, but more accurate because median can leave traces)')

args        = parser.parse_args()
log = get_logger()

log.info("read images ...")

shape=None
images=[]
masks=[]
for filename in args.image :

    log.info(filename)

    # collect exposure times
    fitsfile=pyfits.open(filename)
    primary_header = fitsfile[0].header
    if "EXPREQ" in primary_header :
        exptime = primary_header["EXPREQ"]
        log.warning("Using EXPREQ and not EXPTIME, because a more accurate quantity on teststand")
    else :
        exptime = primary_header["EXPTIME"]
    fitsfile.close()

    # read raw data and preprocess them
    bias=False
    if args.bias : bias=args.bias
    dark=False
    pixflat=False
    mask=False
    
    img = io.read_raw(filename, args.camera,bias=args.bias,nocosmic=(not args.cosmicsub),mask=mask,dark=dark,pixflat=pixflat,ccd_calibration_filename=False)
    if shape is None :
        shape=img.pix.shape
    log.info("adding dark %s divided by exposure time %f s"%(filename,exptime))
    images.append(img.pix.ravel()/exptime)
    masks.append(img.mask.ravel())

images=np.array(images)
masks=np.array(masks)


if not args.cosmicsub :
    log.info("compute simple median image ...")
    medimage=np.median(images,axis=0).reshape(shape)
else :
    # need to do median of only the valid pixels
    medimage=np.ma.median(np.ma.masked_array(data=images,mask=(masks!=0)),axis=0).data.reshape(shape)


log.info("write result in %s ..."%args.outfile)
hdulist=pyfits.HDUList([pyfits.PrimaryHDU(medimage)])
i=0
for filename in args.image :
    hdulist[0].header["INPUT%03d"%i]=filename
    i+=1
hdulist.writeto(args.outfile,clobber="True")
log.info("done")
