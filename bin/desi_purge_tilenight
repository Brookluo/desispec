#!/usr/bin/env python
# coding: utf-8

import argparse
from desispec.io.meta import findfile
from desispec.workflow.exptable import get_exposure_table_pathname
from desispec.workflow.proctable import get_processing_table_pathname
from desispec.workflow.tableio import load_table, write_table

import os
import glob
import shutil
import sys
import numpy as np
import time


def get_parser():
    """
    Creates an arguments parser for the edit_exposure_table script
    """
    parser = argparse.ArgumentParser(usage = "{prog} [options]")
    parser.add_argument("-n", "--night", type=str, default='none', help="Night that the tile was observed.")
    parser.add_argument("-t", "--tile", type=str, default='none', help="Tile to remove from current prod.")
    parser.add_argument("--not-dry-run", action="store_true", help="set to actually perform action rather than print actions")
    return parser

def remove_directory(dirname, dry_run=True):
    """
    Remove the given directory from the file system

    Args:
        dirname, str. Full pathname to the directory you want to remove
        dru_run, bool. True if you want to print actions instead of performing them.
                       False to actually perform them.
    """
    if os.path.exists(dirname):
        print(f"Identified directory {dirname} as existing.")
        print(f"Dir has contents: {os.listdir(dirname)}")
        if dry_run:
            print(f"Dry_run set, so not performing action.")
        else:
            print(f"Removing: {dirname}")
            shutil.rmtree(dirname)
    else:
        print(f"Directory {dirname} doesn't exist, so no action required.")

def purge_tilenight(tile, night, dry_run=True):
    """
        Removes all files assosciated with a tile on a given night.
        Removes preproc files, exposures files including frames, redrock files
        for perexp and pernight, and cumulative redshifts for nights on or
        after the night in question. Only exposures assosciated with the tile
        on the given night are removed.

    Args:
        tile, str or int. Tile to remove from current prod.
        night, str or int. Night that the tile was observed.
        dry_run, bool. If True, only prints actions it would take
    """
    if night is None:
        raise ValueError("Must specify night.")
    if tile is None:
        raise ValueError("Must specify tile.")

    epathname = get_exposure_table_pathname(night=str(night), usespecprod=True)
    etable = load_table(tablename=epathname, tabletype='exptable')
    exptable = etable[etable['TILEID'] == tile]

    tile, night = int(tile), int(night)

    ## Per exposure: remove preproc, exposure, and perexp redshift directories
    for row in exptable:
        expid = int(row['EXPID'])
        for ftype in ['preproc', 'frame']:
            dirname = os.path.dirname(findfile(filetype=ftype, night=night,
                                               expid=expid, camera='b0',
                                               spectrograph=0, tile=tile))
            remove_directory(dirname, dry_run)

        groupname = 'perexp'
        ftype = 'redrock_tile'
        dirname = os.path.dirname(findfile(filetype=ftype, night=night,
                                           expid=expid, camera='b0',
                                           spectrograph=0, tile=tile,
                                           groupname=groupname))
        remove_directory(dirname, dry_run)

    ## Remove the pernight redshift directory if it exists
    groupname = 'pernight'
    ftype = 'redrock_tile'
    dirname = os.path.dirname(findfile(filetype=ftype, night=night,
                                       camera='b0', spectrograph=0, tile=tile,
                                       groupname=groupname))
    remove_directory(dirname, dry_run)

    ## Look at all cumulative redshifts and remove any that would include the
    ## give tile-night data (any THRUNIGHT on or after the night given)
    groupname = 'cumulative'
    ftype = 'redrock_tile'
    tiledirname = os.path.dirname(os.path.dirname(findfile(filetype=ftype,
                                                           night=night,
                                                           camera='b0',
                                                           spectrograph=0,
                                                           tile=tile,
                                                           groupname=groupname)))
    thrunights = os.listdir(tiledirname)
    for thrunight in thrunights:
        if int(thrunight) >= night:
            dirname = os.path.join(tiledirname,thrunight)
            remove_directory(dirname, dry_run)

    ## Load old processing table and move it out of the way
    timestamp = time.strftime('%Y%M%d_%Hh%mm')
    ppathname = get_processing_table_pathname(prodmod=str(night))
    ptable = load_table(tablename=epathname, tabletype='proctable')
    os.rename(ppathname,ppathname.replace('.csv',f".{timestamp}.csv"))

    ## Now let's remove the tile from the processing table
    ptable = ptable[ptable['TILEID']!=tile]
    write_table(ptable,tablename=ppathname)

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    ## Set tablepath and night to None if not given
    if args.tile.lower() == 'none':
        args.tile = None
    if args.night.lower() == 'none':
        args.night = None

    purge_tilenight(args.tile, args.night,
                    dry_run=(not args.not_dry_run))
