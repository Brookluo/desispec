#!/usr/bin/env python
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
Setup pipeline reduction from scratch
"""

from __future__ import absolute_import, division, print_function

import sys
import os
import numpy as np
import argparse
import re

import desispec.io as io


def main():
    parser = argparse.ArgumentParser(description='Set up pipeline runs for one or more nights.')
    parser.add_argument('--raw', required=False, default=None, help='raw data directory')
    parser.add_argument('--redux', required=False, default=None, help='output directory')
    parser.add_argument('--redux-prod', required=False, default=None, help='output production name')
    parser.add_argument('--nights', required=False, default=None, help='comma separated (YYYYMMDD) or regex pattern')
    parser.add_argument('--desimodel', required=False, default='/project/projectdirs/desi/software/edison/desimodel/trunk', help='desimodel checkout to use')
    parser.add_argument('--aux', required=False, default='/project/projectdirs/desi', help='root directory containing auxiliary data files')

    args = parser.parse_args()

    # If data directories are not given, get them from existing environment
    # variables.

    rawdir = args.raw
    if rawdir is None:
        rawdir = io.rawdata_root()
    else:
        # We are overriding the raw data directory.
        # Set the correct environment variable so that
        # the I/O routines work.
        os.environ['DESI_SPECTRO_DATA'] = os.path.abspath(rawdir)
    rawdir = os.path.abspath(rawdir)

    specdir = args.redux
    if specdir is None:
        specdir = io.specprod_root()
    else:
        # We are overriding the raw data directory.
        # Set the correct environment variable so that
        # the I/O routines work.
        os.environ['DESI_SPECTRO_REDUX'] = os.path.abspath(specdir)
    specdir = os.path.abspath(specdir)

    # Create the output directory if needed

    if not os.path.isdir(specdir):
        os.makedirs(specdir)
        



if __name__ == "__main__":
    main()

