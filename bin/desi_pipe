#!/usr/bin/env python
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
Setup pipeline reduction from scratch
"""

from __future__ import absolute_import, division, print_function

import sys
import os
import numpy as np
import argparse
import re

import desispec.io as io

import desispec.pipeline as pipe


def main():
    parser = argparse.ArgumentParser(description='Set up pipeline runs for a production.')
    parser.add_argument('--raw', required=True, default=None, help='raw data directory')
    parser.add_argument('--redux', required=True, default=None, help='output directory')
    parser.add_argument('--prod', required=False, default='test', help='output production name')
    parser.add_argument('--nights', required=False, default=None, help='comma separated (YYYYMMDD) or regex pattern')
    parser.add_argument('--env', required=False, default=None, help='text file with environment setup commands')
    parser.add_argument('--simraw', required=False, action='store_true', help='if set, raw data is simulated')

    args = parser.parse_args()

    rawdir = os.path.abspath(args.raw)

    specdir = os.path.abspath(args.redux)

    # Create the output directories if needed

    if not os.path.isdir(specdir):
        os.makedirs(specdir)

    proddir = os.path.join(specdir, args.prod)
    if not os.path.isdir(proddir):
        os.makedirs(proddir)
    
    cal2d = os.path.join(proddir, 'calib2d')
    if not os.path.isdir(cal2d):
        os.makedirs(cal2d)

    calpsf = os.path.join(cal2d, 'psf')
    if not os.path.isdir(calpsf):
        os.makedirs(calpsf)

    expdir = os.path.join(proddir, 'exposures')
    if not os.path.isdir(expdir):
        os.makedirs(expdir)

    # Get full list of nights

    print("Selecting nights for processing")

    allnights = []
    nightpat = re.compile(r'\d{8}')
    for root, dirs, files in os.walk(rawdir, topdown=True):
        for d in dirs:
            nightmat = nightpat.match(d)
            if nightmat is not None:
                allnights.append(d)
        break

    # Trim list of nights based on set of patterns

    nights = []
    if args.nights is not None:
        nightsel = args.nights.split(',')
        for sel in nightsel:
            pat = re.compile(sel)
            for nt in allnights:
                mat = pat.match(nt)
                if mat is not None:
                    if nt not in nights:
                        nights.append(nt)
        nights = sorted(nights)
    else:
        nights = sorted(allnights)

    # create per-night directories

    for nt in nights:
        ndir = os.path.join(expdir, nt)
        if not os.path.isdir(ndir):
            os.makedirs(ndir)
        ndir = os.path.join(cal2d, nt)
        if not os.path.isdir(ndir):
            os.makedirs(ndir)
        ndir = os.path.join(calpsf, nt)
        if not os.path.isdir(ndir):
            os.makedirs(ndir)

    # create setup shell snippet

    setupfile = os.path.join(proddir, 'setup.sh')
    with open(setupfile, 'w') as s:
        s.write("# Generated by desi_pipe\n")
        s.write("export DESI_SPECTRO_DATA={}\n".format(rawdir))
        s.write("export DESI_SPECTRO_REDUX={}\n".format(specdir))
        s.write("export PRODNAME={}\n".format(args.prod))
        s.write("\n")

    # read in the environment setup, if needed

    envcom = []
    if args.env is not None:
        with open(args.env, 'r') as f:
            for line in f:
                envcom.append(line.rstrip())

    # create scripts for processing

    print("Generating nightly scripts")

    scrdir = os.path.join(proddir, 'scripts')
    if not os.path.isdir(scrdir):
        os.makedirs(scrdir)

    logdir = os.path.join(proddir, 'logs')
    if not os.path.isdir(logdir):
        os.makedirs(logdir)

    if args.simraw:
        pixroot = "pix"
    else:
        pixroot = "raw"

    com_master_shell = []
    com_master_nersc = []

    for nt in nights:
        # get the list of exposures and their types
        (expid, exptype, fibermap, fullraw) = pipe.find_raw(rawdir, nt, simraw=args.simraw)
        
        # make nightly script and log directories
        nsdir = os.path.join(scrdir, nt)
        if not os.path.isdir(nsdir):
            os.makedirs(nsdir)
        nldir = os.path.join(logdir, nt)
        if not os.path.isdir(nldir):
            os.makedirs(nldir)

        # create scripts to run bootcalib
        firstarc = None
        for ex in expid:
            if exptype[ex] == "arc":
                firstarc = ex
                break
        firstflat = None
        for ex in expid:
            if exptype[ex] == "flat":
                firstflat = ex
                break
        commands = []
        for cam in sorted(fullraw.keys()):
            flatname = "{}-{}-{:08d}.fits".format(pixroot, cam, firstflat)
            flatfile = os.path.join(rawdir, nt, flatname)
            arcname = "{}-{}-{:08d}.fits".format(pixroot, cam, firstarc)
            arcfile = os.path.join(rawdir, nt, arcname)
            outname = "psfboot-{}.fits".format(cam)
            outfile = os.path.join(calpsf, nt, outname)
            commands.append("desi_bootcalib.py --fiberflat {} --arcfile {} --outfile {}".format(flatfile, arcfile, outfile))
        shell_file = os.path.join(nsdir, "bootcalib.sh")
        nersc_file = os.path.join(nsdir, "bootcalib.nersc")
        shell_log = os.path.join(nldir, "bootcalib_sh")
        nersc_log = os.path.join(nldir, "bootcalib_nersc")
        pipe.shell_job(shell_file, shell_log, envcom, setupfile, commands)
        pipe.nersc_job(nersc_file, nersc_log, envcom, setupfile, commands, nodes=30, nodeproc=1, minutes=30, openmp=False, multiproc=False)

        com_master_shell.append("bash {}".format(shell_file))

        # Create scripts to run specex

        lamplines = "/project/projectdirs/desi/software/edison/specex/specex-0.3.4/data/lamplines-specex.par"
        bootr = os.path.join(calpsf, nt, "psfboot-r.fits")
        bootb = os.path.join(calpsf, nt, "psfboot-b.fits")
        bootz = os.path.join(calpsf, nt, "psfboot-z.fits")
        optsim = ""
        if args.simraw:
            optsim = "--simraw "
        commands = ["desi_pipe_psf {}--lamplines {} --bootcalib_r {} --bootcalib_b {} --bootcalib_z {} --night {}".format(optsim, lamplines, bootr, bootb, bootz, nt)]
        shell_file = os.path.join(nsdir, "specex.sh")
        nersc_file = os.path.join(nsdir, "specex.nersc")
        shell_log = os.path.join(nldir, "specex_sh")
        nersc_log = os.path.join(nldir, "specex_nersc")
        pipe.shell_job(shell_file, shell_log, envcom, setupfile, commands)
        # for one exposure, there are 600 bundles.  If we run 8 per node (which works
        # well for 24 or 32 cores per node), then we want 75 nodes.  Specex
        # is OpenMP parallel.
        pipe.nersc_job(nersc_file, nersc_log, envcom, setupfile, commands, nodes=75, nodeproc=8, minutes=30, openmp=True, multiproc=False)

        com_master_shell.append("bash {}".format(shell_file))

        # Create scripts to run exspec

        optsim = ""
        if args.simraw:
            optsim = "--simraw "
        commands = ["desi_pipe_extract {}--night {}".format(optsim, nt)]
        shell_file = os.path.join(nsdir, "exspec.sh")
        nersc_file = os.path.join(nsdir, "exspec.nersc")
        shell_log = os.path.join(nldir, "exspec_sh")
        nersc_log = os.path.join(nldir, "exspec_nersc")
        pipe.shell_job(shell_file, shell_log, envcom, setupfile, commands)
        # for one exposure, there are 600 bundles.  If we run 8 per node (which works
        # well for 24 or 32 cores per node), then we want 75 nodes.  This is python,
        # so no threads, but multiprocessing might be used.
        pipe.nersc_job(nersc_file, nersc_log, envcom, setupfile, commands, nodes=75, nodeproc=8, minutes=30, openmp=False, multiproc=True)

        com_master_shell.append("bash {}".format(shell_file))

    # Create master scripts with job dependencies
    shell_master = os.path.join(scrdir, 'run.sh')
    with open(shell_master, 'w') as f:
        for com in com_master_shell:
            f.write("{}\n".format(com))

    shell_nersc = os.path.join(scrdir, 'run.nersc')
    with open(shell_nersc, 'w') as f:
        for com in com_master_nersc:
            f.write("{}\n".format(com))


if __name__ == "__main__":
    main()

