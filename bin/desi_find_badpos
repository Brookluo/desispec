#!/usr/bin/env python

"""Find exposures with a significant fraction of bad positioners.

desi_find_badpos --reduxdir /global/cfs/cdirs/desi/spectro/redux/everest --mp 32 -o everest-badpos.fits

"""
import os, sys, argparse, pdb
import numpy as np
import fitsio
import multiprocessing
from astropy.table import Table
from desiutil.log import get_logger
from desispec.io import specprod_root, iterfiles

def _badpos_in_fibermap(args):
    return badpos_in_fibermap(*args)

def badpos_in_fibermap(fibermapfile):

    fm = fitsio.read(fibermapfile, 'FIBERMAP', columns=['PETAL_LOC', 'DELTA_X', 'DELTA_Y'])
    night, expid = np.array(fibermapfile.split('/')[-3:-1]).astype(int) # fragile...

    inan = np.logical_or(np.isnan(fm['DELTA_X']), np.isnan(fm['DELTA_Y']))
    ibig = fm['DELTA_X']**2 + fm['DELTA_Y']**2 > 0.030**2
    ibad = np.logical_or(inan, ibig)

    # get the per-petal fraction of bad positioners
    petals = set(fm['PETAL_LOC'])
    rows = list()
    for petal in petals:
        npos = np.sum(fm['PETAL_LOC'] == petal) # should always be 500
        fbad = np.sum((fm['PETAL_LOC'] == petal) * ibad) / npos
        rows.append((night, expid, petal, fbad))
        
    out = Table(rows=rows, names=('NIGHT', 'EXPID', 'PETAL_LOC', 'FBAD'),
                dtype=(np.int32, np.int32, np.int16, np.float32))

    pdb.set_trace()
    
    return out

def main():

    p = argparse.ArgumentParser()
    p.add_argument('--reduxdir', type=str, help='spectro redux base dir overrides $DESI_SPECTRO_REDUX/$SPECPROD')
    p.add_argument('--mp', type=int, default=1, help='number of multiprocessing cores')
    p.add_argument('-o', '--outfile', type=str, required=True, help='output FITS file')
    
    args = p.parse_args()
    log = get_logger()

    if args.reduxdir is None:
        args.reduxdir = specprod_root()

    #fibermapfiles = sorted(iterfiles(f'{args.reduxdir}/preproc', 'fibermap-'))
    fibermapfiles = ['/global/cfs/cdirs/desi/spectro/redux/everest/preproc/20210614/00094626/fibermap-00094626.fits'] # testing
    
    n = len(fibermapfiles)
    if n == 0:
        log.error(f'No fibermaps found in {args.reduxdir}/preproc')
        sys.exit(1)
    else:
        log.info(f'Processing {n} fibermaps from {args.reduxdir}/preproc')

    if args.mp > 1:
        mpargs = [[fibermapfile] for fibermapfile in fibermapfiles]
        with multiprocessing.Pool(args.mp) as P:
            out = P.map(_badpos_in_fibermap, mpargs)
    else:
        out = [badpos_in_fibermap(fibermapfile) for fibermapfile in fibermapfiles]

    # stack and write out
    out = Table(np.hstack(out))        
    out.meta['EXTNAME'] = 'FBADPOS'
    out.write(args.outfile, overwrite=True)

if __name__ == '__main__':
    main()
