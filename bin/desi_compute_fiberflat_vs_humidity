#!/usr/bin/env python

import sys,os
import astropy.io.fits as pyfits
from astropy.table import Table
import fitsio
import numpy as np
import glob
from scipy.ndimage.filters import median_filter
from scipy.signal import fftconvolve,correlate


import matplotlib.pyplot as plt

from desiutil.log import get_logger
from desispec.io import findfile,read_fiberflat
from desispec.io.humidity import read_fiberflat_vs_humidity

log=get_logger()

year=2021

wave=None
fiberflats_in_bin=None
bhumids_in_bin=None
hdulist=None

for spectro in range(10) :
    cam=f"b{spectro}"

    humidity_table_filename=f"humidity_table_{cam}.csv"
    if not os.path.isfile(humidity_table_filename) :

        vals=dict()
        vals["NIGHT"]=[]
        vals["HUMIDITY"]=[]

        # loop on nights with fiberflat
        for flat_filename in sorted(glob.glob(f"/global/cfs/cdirs/desi/spectro/redux/daily/calibnight/{year}*/fiberflatnight-{cam}-*.fits")) :
            print(flat_filename)
            head=fitsio.read_header(flat_filename)
            night=head['NIGHT']
            month=night//100
            et_filename=f"/global/cfs/cdirs/desi/spectro/redux/daily/exposure_tables/{month}/exposure_table_{night}.csv"
            if not os.path.isfile(et_filename) :
                log.error(f"missing {et_filename}")
                continue
            et=Table.read(et_filename)
            ii=(et['OBSTYPE']=='flat')
            expids=list(et['EXPID'][ii])
            #print(night,expids)
            bhumid_vals=[]
            for expid in expids :
                desi_filename=findfile("raw",night=night,expid=expid)
                #print(desi_filename)
                spectcons=fitsio.read(desi_filename,"SPECTCONS")
                ii=(spectcons["unit"]==spectro)
                if np.sum(ii)==0 :
                    log.warning(f"no spectro {spectro} in {desi_filename}")
                    continue
                bhumid=float(spectcons["BHUMID"][ii])
                if bhumid<=0 :
                    log.warning(f"unphysical humidity value = {bhumid}")
                    continue
                bhumid_vals.append(bhumid)
                #print(expid,bhumid)
            if len(bhumid_vals)==0 :
                log.error(f"couldn't get humidity info for night {night}")
                continue
            bhumid=np.mean(bhumid_vals)
            vals["NIGHT"].append(night)
            vals["HUMIDITY"].append(bhumid)
        t=Table()
        for k in vals.keys() :
            t[k]=vals[k]
        t.write(humidity_table_filename)
        print("wrote",humidity_table_filename)

    humidity_table = Table.read(humidity_table_filename)

    print("Humidity table:")
    print(humidity_table)
    print("")

    wave = None
    goodfibers= None

    # humidity bins have been adjusted based on the distribution of humidity values.
    # note this is the humidity in the shack which is maintained below 50%
    # all humidity values are in percent
    # we want 'nmin' entries per bin
    nmin=10
    b=0
    e=b+0.1
    humidity_bins=[b]
    while(True) :
        while((np.sum((humidity_table["HUMIDITY"]>=b)&(humidity_table["HUMIDITY"]<e))<nmin)&(e<50)) :
            e += 0.1
            continue
        humidity_bins.append(np.around(e,1))
        b=e+0.
        if e>=50. : break
    n=np.sum((humidity_table["HUMIDITY"]>=humidity_bins[-2]))
    if n<nmin :
        humidity_bins.pop(len(humidity_bins)-2)
        humidity_bins[-1]=50.
    humidity_bins=np.array(humidity_bins)
    log.info(f"humidity bins = {humidity_bins}")
    nbins=humidity_bins.size

    # loop on bins
    for bin_index in range(nbins-1) :

        extname="HUM{:02d}".format(bin_index)
        ofilename=f"fiberflat-vs-humidity-{cam}-{extname}.fits"
        if os.path.isfile(ofilename) :
            log.info(f"skip existing {ofilename}")
            continue

        min_humidity=humidity_bins[bin_index]
        max_humidity=humidity_bins[bin_index+1]
        fiberflats_in_bin=[]
        bhumids_in_bin=[]


        selection=(humidity_table["HUMIDITY"]>=min_humidity)&(humidity_table["HUMIDITY"]<max_humidity)
        if np.sum(selection)<2 : continue
        nights=humidity_table["NIGHT"][selection]
        log.info("Humidity bin #{} nights={}".format(bin_index,list(nights)))

        # loop on nights with fiberflat
        for night in nights :
            flat_filename = f"/global/cfs/cdirs/desi/spectro/redux/daily/calibnight/{night}/fiberflatnight-{cam}-{night}.fits"
            log.info(f"Humidity bin #{bin_index} night={night} {flat_filename}")
            flat=read_fiberflat(flat_filename)

            if wave is None :
                wave=flat.wave
                # fixed list of good fibers
                ivar=(flat.ivar)*(flat.mask==0)
                medflat=np.median(flat.fiberflat,axis=1)
                mmedflat=np.median(medflat)
                goodfibers=np.where((np.sum(flat.ivar,axis=1)>0)&(medflat>0.5*mmedflat))[0]

            mflat=np.median(flat.fiberflat[goodfibers],axis=0)
            flats=[]
            for fiber in goodfibers :
                norm=np.sum(flat.ivar[fiber]*mflat**2)
                if norm<=0 :
                    continue
                s=np.median(flat.fiberflat[fiber]/mflat)
                flats.append(flat.fiberflat[fiber]/s)
            mflat=np.median(np.array(flats),axis=0)
            flat.fiberflat /= (mflat+(mflat==0))

            fiberflats_in_bin.append(flat.fiberflat)
            bhumids_in_bin.append(np.mean(humidity_table["HUMIDITY"][humidity_table["NIGHT"]==night]))

        if len(bhumids_in_bin)<2 : continue

        log.info("now median in bin")
        hdulist=pyfits.HDUList([pyfits.PrimaryHDU(wave)])
        hdulist[0].header["EXTNAME"]="WAVELENGTH"
        hdulist[0].header["CAMERA"]=cam

        tmp=np.array(fiberflats_in_bin)
        fiberflat_in_bin = np.median(tmp,axis=0)
        hdulist.append(pyfits.ImageHDU(fiberflat_in_bin,name=extname))
        hdulist[extname].header["MEDHUM"]=np.median(bhumids_in_bin)
        hdulist[extname].header["MINHUM"]=np.min(bhumids_in_bin)
        hdulist[extname].header["MAXHUM"]=np.max(bhumids_in_bin)
        hdulist.writeto(ofilename,overwrite=True)
        log.info(f"wrote {ofilename}")


    hdulist=None

    # merging
    # loop on bins
    for bin_index in range(nbins-1) :
        extname="HUM{:02d}".format(bin_index)
        filename=f"fiberflat-vs-humidity-{cam}-{extname}.fits"
        if not os.path.isfile(filename): continue
        print("adding",filename)
        h=pyfits.open(filename)
        if hdulist==None :
            hdulist=h
            continue
        hdulist.append(h[extname])

    ofilename=f"fiberflat-vs-humidity-{cam}.fits"
    hdulist.writeto(ofilename,overwrite=True)
    log.info(f"wrote {ofilename}")

    # reload data
    fiberflat,humidity,wave,_,_,header = read_fiberflat_vs_humidity(ofilename)

    nfibers = fiberflat.shape[1]
    shiftdelta = np.zeros((nfibers,humidity.size))
    shiftcomp  = np.zeros((nfibers,wave.size))

    # for each fiber
    for fiber in range(nfibers) :
        log.info(f"fiber #{fiber} fit the component that corresponds to a pure wavelength shift")
        width=300
        crossdflat=np.zeros((fiberflat.shape[0],fiberflat.shape[2]))
        iref=fiberflat.shape[0]//2
        crossdflat[iref]=fiberflat[iref,fiber]-median_filter(fiberflat[iref,fiber],width)
        delta=np.zeros(humidity.size)
        u=np.arange(fiberflat.shape[2])
        for i in range(humidity.size) :
            if i!=iref :
                dflat=fiberflat[i,fiber]-median_filter(fiberflat[i,fiber],width)
                corr=correlate(dflat,crossdflat[iref],"same")
                j=np.argmax(corr)
                hw=5
                x=np.arange(j-hw,j+hw+1)
                y=corr[j-hw:j+hw+1]
                c=np.polyfit(x,y,2)
                val=-c[1]/2./c[0]
                delta[i]=val-corr.size//2
                crossdflat[i]=np.interp(u,u-delta[i],dflat)
        # save this component
        shiftcomp[fiber] = np.median(crossdflat,axis=0)
        # also save the shift values as a function of humidity
        shiftdelta[fiber]= delta


    margin=70
    shiftcomp[:,:margin]=0.
    shiftcomp[:,-margin:]=0.

    hdulist = pyfits.open(ofilename)
    hdulist.append(pyfits.ImageHDU(humidity,name="HUMIDITY"))
    hdulist.append(pyfits.ImageHDU(shiftcomp,name="SHIFTCOMP"))
    hdulist.append(pyfits.ImageHDU(shiftdelta,name="SHIFTDELTA"))
    hdulist.writeto(ofilename,overwrite=True)
    log.info(f"wrote {ofilename}")
