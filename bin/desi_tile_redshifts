#!/usr/bin/env python

"""
Another version of running redshifts per tile

Examples:

All exposures of tile 80605 on night 20201215:

    desi_tile_redshifts --tile 80605 --night 20201215 --group pernight

All exposures of tile 80605 on night 20201215 and prior:

    desi_tile_redshifts --tile 80605 --night 20201215 --group cumulative

Tile 80605 combined across all nights:

    desi_tile_redshifts --tile 80605 --group cumulative

Tile 80605 on nights 20201214 20201215:

    desi_tile_redshifts --tile 80605 --night 20201214 20201215 --group blat

Exposures E1 E2 E3 on night 20201215 (auto splitting by TILEID if needed):

    desi_tile_redshifts --night 20201215 --expid 67972 67973 67968 67969 --group foo

Generate scripts for every tile on 20201215 but don't submit batch jobs:

    desi_tile_redshifts --night 20201215 --group pernight --nosubmit

Use exposures from a separately curated input list:

    desi_tile_redshifts --explist explist-deep.txt --group deep

Not supported yet: multiple tiles on a single night in a single call:

    desi_tile_redshifts --night 20201215 --tileid 80605 80606 80607 --group cumulative

"""

# - Parse command line quickly for --help before slower imports
import argparse

p = argparse.ArgumentParser()
p.add_argument("-n", "--night", type=int, nargs='+', help="YEARMMDD nights")
p.add_argument("-t", "--tileid", type=int, help="Tile ID")
p.add_argument("-e", "--expid", type=int, nargs='+', help="exposure IDs")
p.add_argument("-g", "--group", type=str, required=True,
               help="cumulative, pernight, perexp, or a custom name")
p.add_argument("--explist", type=str,
               help="file with columns TILE NIGHT EXPID to use")
p.add_argument("--nosubmit", action="store_true",
               help="generate scripts but don't submit batch jobs")
p.add_argument("--batch-queue", type=str, default='realtime',
               help="batch queue name")
p.add_argument("--batch-reservation", type=str,
               help="batch reservation name")
p.add_argument("--batch-dependency", type=str,
               help="job dependencies passed to sbatch --dependency")
p.add_argument("--system-name", type=str,
               help="batch system name, e.g. cori-haswell, cori-knl, perlmutter-gpu")

# TODO
# p.add_argument("--outdir", type=str, help="output directory")
# p.add_argument("--scriptdir", type=str, help="script directory")
# p.add_argument("--per-exposure", action="store_true",
#         help="fit redshifts per exposure instead of grouping")

args = p.parse_args()

import sys
from desispec.scripts.tile_redshifts import create_and_submit_tile_redshifts

batch_scripts, failed_jobs = create_and_submit_tile_redshifts(**args.__dict__)

num_error = len(failed_jobs)
sys.exit(num_error)
