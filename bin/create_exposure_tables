#!/usr/bin/env python
# coding: utf-8

import argparse

## Import some helper functions, you can see their definitions by uncomenting the bash shell command
from desispec.scripts.exposuretable import create_exposure_tables


def get_parser():
    """
    Creates an arguments parser for the create_exposure_tables script
    """
    parser = argparse.ArgumentParser(usage = "{prog} [options]")
    parser.add_argument("-n", "--nights", type=str,  help="nights as comma separated string")
    parser.add_argument("--obstypes", type=str, default=None, help="comma separated list of exposure types to include in "+\
                                                           "the exposure table, e.g. science,arc,flat,dark,zero, ...")
    parser.add_argument("-i", "--path-to-data", type=str, default=None, help="path to the raw input data")
    parser.add_argument("-o","--exp-table-path", type=str, default=None,  help="path to save exposure tables, without monthly subdirectory")
    parser.add_argument("--overwrite-files", action="store_true", help="overwrite existing exposure tables")
    parser.add_argument("--verbose", action="store_true", help="print verbose output")
    parser.add_argument("--no-specprod", action="store_true", help="Create exposure table in repository location "+\
                                                                     "rather than the SPECPROD location.")

    return parser



if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()

    args.nights = [ int(val) for val in args.nights.strip("\n\t ").split(",") ]
    if args.obstypes is not None:
        args.obstypes = [ val.strip('\t ') for val in args.obstypes.split(",") ]
    print("Nights: ", args.nights)
    print("Obs types: ", args.obstypes)

    create_exposure_tables(**args.__dict__)