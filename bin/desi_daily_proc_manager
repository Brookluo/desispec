#!/usr/bin/env python
# coding: utf-8

import argparse
import socket
import sys
import numpy as np

from desispec.scripts.daily_processing import daily_processing_manager
from desispec.io.util import create_camword

from desispec.workflow.timing import during_operating_hours
from desispec.workflow.os import check_running

def parse_args():#options=None):
    """
    Creates an arguments parser for the desi daily processing manager
    """
    parser = argparse.ArgumentParser(description="Perform daily processing of spectral" +
                                                 "data using the DESI pipeline.")

    parser.add_argument("--cameras", type=str, required=False,
                        help="Explicitly define the spectrographs for which you want" +
                             " to reduce the data. Should be a comma separated list." +
                             " Numbers only assumes you want to reduce r, b, and z " +
                             "for that camera. Otherwise specify separately [brz][0-9].")
    parser.add_argument("--obs-to-process", type=str, default=None, required=False,
                        help="The basic data obstypes to submit for processing. " +
                             "E.g. science, dark, twilight, flat, arc, zero.")

    # File and dir defs
    parser.add_argument("-s", "--specprod", type=str, required=False, default=None,
                        help="Subdirectory under DESI_SPECTRO_REDUX to write the output files. "+\
                             "Overwrites the environment variable SPECPROD")
    parser.add_argument("--exp-table-path", type=str, required=False, default=None,
                        help="Directory name where the output exposure table should be saved.")
    parser.add_argument("--proc-table-path", type=str, required=False, default=None,
                        help="Directory name where the output processing table should be saved.")
    parser.add_argument("--raw-data-path", type=str, required=False, default=None,
                        help="Directory name where the input raw data can be found.")
    parser.add_argument("--table-file-type", type=str, required=False, default='csv',
                        help="File format and extension for the exp and proc tables.")
    # parser.add_argument("-r", "--reduxdir", type=str, required=False,
    #                     help="Main reduction dir where specprod dir will reside.")

    # Code Flags
    parser.add_argument("--ignore-instances", action="store_true",
                        help="Allow script to run even if another instance is " +
                             "running. Use with care.")
    parser.add_argument("--ignore-cori-node", action="store_true",
                        help="Allow script to run on nodes other than cori21")
    parser.add_argument("--dry-run", action="store_true",
                        help="Perform a dry run where no jobs are actually created or submitted.")
    parser.add_argument("--override-night", type=str,default=None,
                        help="Specify the night to run on. Overrides the current day.")
    parser.add_argument("--continue-looping-debug",action="store_true",help= "FOR DEBUG purposes only."+
                         "Will continue looping in search of new data until the process is terminated externally.")
    # parser.add_argument("--force-specprod", action="store_true",
    #                     help="Force the files to be written to custom SPECPROD " +
    #                          "even if user is desi.")
    # parser.add_argument("--scattered-light", action="store_true",
    #                     help="Pass scattered light command to desi_proc. Fits and removes scattered light.")
    # parser.add_argument("--most-recent-calib", action="store_true",
    #                     help="Look backward in time for the most recent night with good calibration files." + \
    #                          " If not set the defaults in DESI_SPECTRO_CALIB are used.")

    # Read in command line and return
    # if options is None:
    #     args = parser.parse_args()
    # else:
    #     args = parser.parse_args(options)
    args = parser.parse_args()
    
    return args


if __name__ == '__main__':
    args = parse_args()
    if not during_operating_hours(dry_run=args.dry_run) and args.override_night is None:
        sys.exit(1)

    if not args.ignore_cori_node and socket.gethostname() != 'cori21':
        print('This should only run on cori21')
        sys.exit(1)

    if not args.ignore_instances:
        running = check_running(proc_name='desi_daily_proc_manager')
        if not running:
            print('OK to run')
        else:
            sys.exit(1)

    if args.cameras is None:
        camword = None
    elif type(args.cameras) is str:
        if 'a' in args.cameras or 'b' in args.cameras or 'r' in args.cameras or 'z' in args.cameras:
            if ',' in args.cameras:
                camlist = []
                for cam in args.cameras.split(','):
                    if 'a' == cam[0]:
                        camlist.append('b'+cam[1])
                        camlist.append('r'+cam[1])
                        camlist.append('z'+cam[1])
                    else:
                        camlist.append(cam)
                camword = create_camword(camlist)
            else:
                camword = args.cameras
        elif ',' in args.cameras:
            camword = 'a'+args.cameras.replace(',','')
        else:
            camword = 'a'+args.cameras
    elif not np.isscalar(args.cameras):
        camword = create_camword(args.cameras)
    else:
        print(f"Couldn't understand cameras={args.cameras}, ignoring and using information from files")
        camword = None

    daily_processing_manager(specprod=args.specprod, exp_table_path=args.exp_table_path,
                             proc_table_path=args.proc_table_path, path_to_data=args.raw_data_path,
                             procobstypes=args.obs_to_process, dry_run=args.dry_run, tab_filetype=args.table_file_type,
                             camword=camword, override_night=args.override_night,
                             continue_looping=args.continue_looping_debug)
